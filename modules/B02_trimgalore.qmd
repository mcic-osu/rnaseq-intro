---
title: "Trimming with _TrimGalore_"
pagetitle: "TrimGalore"
highlight-style: github
number-sections: true
engine: knitr
author: Jelmer Poelstra
date: 2023-10-01
---

-----------

<br>

## Introduction

In this step, we will remove:

- Any adapter sequences that are present in the reads
- Poor-quality bases at the start and of the reads
- Reads that have become excessively short after the prior two steps

[Discuss a bit how this step is sometimes considered optional:
mappers should be able to deal with poor-quality bases and adapter sequences.]

[Discuss how there are several programs commonly used for this, including
`TrimGalore`, `Trimmomatic`, and `fastp` -- and that in general, these are exchangeable.]

[Discuss how TrimGalore is "just" a wrapper around `CutAdapt`,
and how it will can also run FastQC on the processed sequences.]

<br>

## Using/Getting TrimGalore at OSC

We can use my Conda environment as follows:

```bash
module load miniconda3
source activate /fs/ess/PAS0471/jelmer/conda/trimgalore

```bash
trim_galore --version
```
```{.bash-out}

            Quality-/Adapter-/RRBS-/Speciality-Trimming
                    [powered by Cutadapt]
                        version 0.6.10

                    Last update: 02 02 2023
```

But if you needed/wanted to install it for yourself,
you could do so as follows:

```bash
module load miniconda3/23.3.1-py310 # Load the latest version for installations
conda create -y -n trimgalore -c bioconda trim-galore
```

<br>

## TrimGalore syntax

```bash
trim_galore --help

# NOTE: Below I am only showing (truncated) output for the key options!
```
```{.bash-out}
 USAGE:
trim_galore [options] <filename(s)>

-o/--output_dir <DIR>   If specified all output will be written to this directory instead of the current
                        directory. If the directory doesn't exist it will be created for you.
-j/--cores INT          Number of cores to be used for trimming [default: 1].
--fastqc                Run FastQC in the default mode on the FastQ file once trimming is complete.
--fastqc_args "<ARGS>"  Passes extra arguments to FastQC.
-a/--adapter <STRING>   Adapter sequence to be trimmed. If not specified explicitly, Trim Galore will
                        try to auto-detect whether the Illumina universal, Nextera transposase or Illumina
                        small RNA adapter sequence was used.
-q/--quality <INT>      Trim low-quality ends from reads in addition to adapter removal.
--length <INT>          Discard reads that became shorter than length INT because of either
                        quality or adapter trimming. A value of '0' effectively disables
                        this behaviour. Default: 20 bp.
```

The line under "USAGE:" tells us that the FASTQ file names should be specified
as arguments at the end of the command.
_It is important to realize that we will run TrimGalore for one **sample** at a time_
_and therefore for two FASTQ files (forward/R1 and reverse/R2) at a time._
By comparison, we were able to run FastQC simply for one FASTQ file at a time.
So, without any options, and fictional FASTQ files `A_R1.fastq.gz` and `A_R2.fastq.gz`,
our command would be **`trim_galore A_R1.fastq.gz A_R2.fastq.gz`**.

We will use TrimGalore with **default settings for** trimming of adapters
(i.e. auto-detect, seems to always work), quality-trimming
(minimum Phred quality score of 20), and read length (minimum of 20 bp),
but it's good to know we could easily change those if we wanted to.

We do want to specify the **output directory**,
since it's pretty annoying to get output files in the current working dir:
we could for instance use **`--output_dir results/trimgalore`**.

We'll typically also want to have TrimGalore **run FastQC**,
since it will be good to check if adapter sequences were successfully removed and so on.
We'll also have to tell FastQC about the output dir or its files, too,
will end up in our working dir &mdash;
we can do so via `--fastqc_args` and when we use that argument,
FastQC will already be run (no need to also use `--fastqc`).
We could use **`--fastqc_args --outdir results/trimgalore/fastqc`**.

Finally, we'll usually want to specify the number of cores,
and it should correspond to what we have available for our compute job.
Since we have 1 core in the VS Code session,
we'll use **`--cores 1`** in the test-run,
but something else in our final script.

A final test command to run TrimGalore on our actual (but small, subsetted)
FASTQ files in `data/fastq` could therefore look as follows:

```bash
# For clarity, using one argument/option per line
trim_galore \
    --output_dir results/trimgalore \
    --cores 1 \
    --fastqc_args "--outdir results/trimgalore/fastqc" \
    --paired data/fastq/ASPC1_A178V_R1.fastq.gz data/fastq/ASPC1_A178V_R2.fastq.gz
```

Let's try that out.

You should have gotten _a lot_ of logging output,
which was also saved ...

Let's look at what the output files are:

```bash
ls -lhR results/trimgalore
```

<br>

## Variables in a script to run TrimGalore

To run TrimGalore efficiently at OSC,
we will submit a compute job to run TrimGalore separately for each sample.

We'll have to make our TrimGalore flexible such that it is able to take one or two
**arguments** to specify the input FASTQ files.
This can be one in several ways, but we'll do it as follows:
we'll only pass an R1 FASTQ file to the script,
which will then infer the name of the R2 file (by replacing `_R1` with `_R2`).
This is generally easiest because it allows us to simply loop over the R1 FASTQ
files in our "runner script".

While we're at it, we can also let the script accept an argument with the output
directory name, something that is also good practice not to hardcode.

Let's start by just thinking about we would define this variables for a single
sample, and how the TrimGalore command would change:

```bash
# Variables defined upfront - passed as arguments to the script
R1=data/fastq/ASPC1_A178V_R1.fastq.gz
outdir=results/trimgalore

# "Derived" variables
n_cores=$SLURM_CPUS_ON_NODE
R2=${R1/_R1/_R2}

# The Trimgalore call:
trim_galore \
    --output_dir "$outdir" \
    --cores "$n_cores" \
    --fastqc_args "--outdir "$outdir"/fastqc" \
    --paired "$R1" "$R2"    
```

<br>

## A script to run TrimGalore

```bash
#!/bin/bash
#SBATCH --account=PAS0471
#SBATCH --time=1:00:00
#SBATCH --cpus-per-task=8
#SBATCH --mem=32G
#SBATCH --job-name=trimgalore
#SBATCH --output=slurm-trimgalore-%j.out

# Re-assign positional parameters
R1=$1
outdir=$2

# Load the Conda environment
module load miniconda3
source activate /fs/ess/PAS0471/jelmer/conda/trimgalore

# Use strict Bash settings
set -euo pipefail

# Infer derived variables
n_cores=$SLURM_CPUS_ON_NODE
R2=${R1/_R1/_R2}

# Report
echo "# Starting script trimgalore.sh"
date
echo "# Input R1 FASTQ file:      $R1"
echo "# Output dir:               $outdir"
echo

# Check that the output dir isn't the same as the input dir
# This is because we will let the output files have the same name as the input files
if [[ $(dirname "$R1") == "$outdir" ]]; then
    echo "# ERROR: Input dir is the same as the output dir ($outdir)" 
    exit 1
fi

# Create the output dir
mkdir -p "$outdir" "$outdir"/fastqc

# Run TrimGalore
trim_galore \
    --output_dir "$outdir" \
    --cores "$n_cores" \
    --fastqc_args "--outdir $outdir/fastqc" \
    --paired "$R1" "$R2"

# Rename output files
echo -e "\n# Renaming the output files:"
file_id=$(basename "$R1" _R1.fastq.gz)
R1_out="$outdir"/"$file_id"_R1_val_1.fq.gz
R2_out="$outdir"/"$file_id"_R2_val_2.fq.gz
mv -v "$R1_out" "$outdir"/"$file_id"_R1.fastq.gz
mv -v "$R2_out" "$outdir"/"$file_id"_R2.fastq.gz

# Report
echo -e "\n# Done with script trimgalore.sh"
date
echo -e "\n# Listing files in the output dir:"
ls -lh "$outdir"
```

