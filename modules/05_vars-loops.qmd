---
title: "Variables, Globbing, and Loops"
pagetitle: "Variables, Globbing, and Loops"
highlight-style: github
number-sections: true
knitr:
  opts_knit:
    root.dir: "sandbox"
author: Jelmer Poelstra
---

```{r knitr_options, echo=FALSE}
knitr::opts_chunk$set(eval = FALSE,
                      class.output = "bash-out")
```

-----

In this module, we will cover a few topics that are good to know about
before you start writing and running shell scripts:

- Using **variables** will allow you to run scripts flexibly,
  with different input files and settings.

- **`for` loops** will allow you to repeat operations &mdash;
  specifically, we will later use them to submit many scripts at the same time,
  one per input file or sample.

<br>

## Setup

**Starting a VS Code session with an active terminal:**

1. Log in to OSC at <https://ondemand.osc.edu>.
2. In the blue top bar, select `Interactive Apps` and then `Code Server`.
3. In the form that appears:
   - Enter `4` or more in the box `Number of hours`
   - **To avoid having to switch folders within VS Code**,
     enter `/fs/ess/scratch/PAS2250/participants/<your-folder>` in the box `Working Directory`
     (replace `<your-folder>` by the actual name of your folder).
   - Click `Launch`.
4. On the next page,
   once the top bar of the box is green and says `Runnning`,
   click `Connect to VS Code`.
5. Open a terminal: {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.
6. In the terminal, type `bash` and press <kbd>Enter</kbd>.
7. Type `pwd` in the termain to check you are in `/fs/ess/scratch/PAS2250`.
   
   If not, click
   {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`
   and enter `/fs/ess/scratch/PAS2250/<your-folder>`.

<br>

## Variables

In programming, we use **variables** for things that:

  - We refer to repeatedly and/or
  - Are subject to change.

These tend to be _settings_ like the paths to input and output files,
and parameter values for programs.

Using variables makes it easier to change such settings.
We also need to understand variables to work with loops and with scripts.

### Assigning and referencing variables

**To _assign_ a value to a variable in Bash** (in short: to assign a variable),
use the syntax `variable=value`:

```{bash}
# Assign the value "beach" to the variable "location":
location=beach

# Assign the value "200" to the variable "nlines":
nlines=200
```

:::{.callout-warning}
## Be aware: don't put spaces around the equals sign (`=`)!
:::

**To _reference_ a variable** (i.e., to access its value),
you need to put a dollar sign `$` in front of its name.
We'll use the `echo` command to review the values that our variables contain:

:::{.callout-note}
## `echo` simply prints back ("echoes") whatever you tell it to
```{bash, eval=TRUE}
echo Hello!
```
:::

```{bash, echo=TRUE, eval=FALSE}
echo $location
```

```{bash, echo=FALSE, eval=TRUE}
location=beach
echo $location
```

```{bash, echo=TRUE, eval=FALSE}
echo $nlines
```

```{bash, echo=FALSE, eval=TRUE}
nlines=200

echo $nlines
```

Conveniently, we can directly use variables in lots of contexts,
**as if we had instead typed their _values_**:

```{bash, eval=TRUE}
input_file=data/fastq/SRR7609467.fastq.gz

ls -lh $input_file 
```

```{bash, eval=TRUE}
ls_options="-lh"            # (We'll talk about the quotes that are used here later)

ls $ls_options data/meta
```

<br>

### Rules and tips for naming variables

Variable names:

- **Can** contain letters, numbers, and underscores
- **Cannot** contain spaces, periods, or other special symbols
- **Cannot start** with a number

Try to make your variable names descriptive,
like `$input_file` and `$ls_options` above, as opposed to say `$x` and `$bla`.

There are multiple ways of distinguishing words in the absence of spaces,
such as `$inputFile` and `$input_file`:
I prefer the latter, which is called "snake case", and I always use lowercase.

<br>

### Quoting variables

Above, we learned that a variable name cannot contain spaces.
But what happens if our variable's _value_ contains spaces?
First off, when we try to **assign** the variable without using quotes,
we get an error:

```{bash, eval=FALSE}
today=Thu, Aug 18
```

:::{.bash-out}
Aug: command not found
:::

:::{.callout-caution collapse="true"}
## Why do you think we got this error?

Bash tried assign everything up to the first space (i.e., `Thu,`)
to `today`.
After that, since we used a space,
it assumed the next word (`Aug`) was something else:
specifically, another command.
:::

But it works when we quote (with _double_ quotes, `"..."`)
the entire string that makes up the value:

```{bash, eval=TRUE}
today="Thu, Aug 18"
echo $today
```

----

Now, let's try to **reference** this variable in another context.
Note that the **`touch`** command can create new files,
e.g. `touch a.txt` creates the file `a.txt`.
So let's try make a new file with today's date:

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
touch README_$today.txt
```

```{bash, eval=FALSE}
touch README_$today.txt
ls
```

:::{.bash-out}
18.txt  
Aug  
README_Thu,
::::

:::{.callout-caution collapse="true"}
## What went wrong here?

The shell performed so-called _field splitting_ using spaces as a separator,
splitting the value into three separate units &ndash;
as a result, three files were created.

:::

Like with assignment,
our problems can be avoided by **quoting a variable** when we reference it:

```{bash, eval=FALSE}
touch README_"$today".txt

# This will list the most recently modified file (ls -t sorts by last modified date):
ls -t | head -n 1
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
touch README_"$today".txt
ls -t | head -n 1
```

**It is good practice to quote variables** when you reference them:
it never hurts, and avoids unexpected surprises.

:::{.callout-note collapse="true"}
## At-home reading: Where does a variable name end?

Another issue we can run into when we don't quote variables
is that we can't explicitly define where a variable name ends
within a longer string of text:

```{bash, eval=FALSE}
echo README_$today_final.txt
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
echo README_$today_final.txt
```

:::{.callout-caution collapse="true"}
## What went wrong here? (Hint: check the coloring highlighting above)

- Following a `$`, the shell will stop interpreting characters as being part
  of the variable name only when it encounters a character that cannot be
  part of a variable name, such as a space or a period.

- Since variable names _can_ contain underscores, it will look for the variable
  `$today_final`, which does not exist.
  
- Importantly, the shell **does not error out** when you reference a
  non-existing variable -- it basically ignores it,
  such that `README_$today_final.txt` becomes `README_.txt`,
  as if we hadn't referenced any variable.

:::

Quoting solves this issue, too:

```{bash, eval=FALSE}
echo README_"$today"_final.txt
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
echo README_"$today"_final.txt
```

:::

:::{.callout-note collapse="true"}
## At-home reading: Quoting as "escaping" special meaning -- and double vs. single quotes

By double-quoting a variable,
we are essentially escaping (or "turning off")
the default special meaning of the _space as a separator_,
and are asking the shell to interpret it as a _literal space_.

Similarly, we are escaping other "special characters",
such as globbing wildcards, with double quotes. Compare:

```{bash, eval=TRUE}
echo *     # This will echo/list all files in the current working dir (!)
```

```{bash, eval=TRUE}
echo "*"   # This will simply print the "*" character 
```

However, as we saw above,
double quotes _do not_ turn off the special meaning of `$`
(denoting a string as a variable):

```{bash, eval=FALSE, echo=TRUE}
echo "$today"
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
echo "$today"
```

...but **_single quotes_** will:

```{bash, eval=TRUE, echo=TRUE}
echo '$today'
```

:::

<br>

### Command substitution

If you want to store the result of a command in a variable,
you can use a construct called "**command substitution**"
by wrapping the command inside `$()`.

Let's see an example.
The `date` command will print the current date and time:

```{bash, eval=TRUE}
date
```

If we try to store the date in a variable directly, it doesn't work:
the literal string "date" is stored, not the output of the command:

```{bash, eval=TRUE}
today=date
echo "$today"
```

That's why we need command substitution with `$()`:

```{bash, eval=TRUE}
today=$(date)
echo "$today"
```

----

In practice, you might use command substitution with `date` to include the
current date in files.
To do so, first, note that we can use `date +%F` to 
print the date in `YYYY-MM-DD` format, and omit the time:

```{bash, eval=TRUE}
date +%F
```

Let's use that in a command substitution &mdash; but a bit differently than before:
we use the command substitution `$(date +%F)` _directly_ in our
`touch` command, rather than first assigning it to a variable:

```{bash, eval=FALSE}
# Create a file with our $today variable:
touch README_"$(date +%F)".txt

# Check the name of our newly created file:
ls -t | head -n 1
```

```{bash, eval=TRUE, echo=FALSE}
today=$(date +%F)
touch README_"$today".txt
ls -t | head -n 1
```

Among many other uses,
command substitution is handy when you want your script to report some results,
or when a next step in the script depends on a previous result.

:::{.exercise}

### On Your Own: Command substitution {-}

Say we wanted to store and report the number of lines in a file,
which can be a good QC measure for FASTQ and other genomic data files.

`wc -l` gets you the number of lines,
and you can use a trick to omit the filename:

```{bash, eval=TRUE}
wc -l data/fastq/SRR7609472.fastq.gz
```

```{bash, eval=TRUE}
# Use `<` (input redirection) to omit the filename:
wc -l < data/fastq/SRR7609472.fastq.gz
```

**Use command substitution to store the output of the last command in a variable,**
**and then use an `echo` command to print:**

```{bash-out}
The file has 30387 lines
```

:::{.callout-tip collapse="true"}
## Solution

```{bash, eval=TRUE}
nlines=$(wc -l < data/fastq/SRR7609472.fastq.gz)

echo "The file $nlines lines"
```

**Note:** You don't have to quote variables _inside_ a quoted `echo` call,
since it's, well, already quoted.
If you _also_ quote the variables, you will in fact _unquote_ it,
although that shouldn't pose a problem inside echo statements.

:::
:::

<br>

## For loops

Loops are a universal element of programming languages,
and are used to repeat operations,
such as when you want to run the same script or command for multiple files.

**Here, we'll only cover what is by far the most common type of loop:
the `for` loop.**

`for` loops _iterate_ over a collection, such as a list of files:
that is, they allow you to perform one or more actions for each element in the collection, one element at a time.

### `for` loop syntax and mechanics

Let's see a first example,
where our "collection" is just a very short list of numbers (`1`, `2`, and `3`):

```{bash, eval=TRUE}
for a_number in 1 2 3; do
    echo "In this iteration of the loop, the number is $a_number"
    echo "--------"
done
```

`for` loops contain the following mandatory keywords:

| Keyword   | Purpose	
|-----------|-------------
| `for`	    | After `for`, we set the variable name	
| `in`	    | After `in`, we specify the collection we are looping over	
| `do`	    | After `do`, we have one ore more lines specifying what to do with each item	
| `done`	  | Tells the shell we are done with the loop


:::{.callout-caution collapse="true"}
## A semicolon `;` (as used before `do`) separates two commands on a single line

A semicolon separates two commands written on a single line --
for instance, instead of:

```{bash, eval=FALSE}
mkdir results
cd results
```

...you could equivalently type:

```{bash, eval=FALSE}
mkdir results; cd results
```

The `;` in the `for` loop syntax has the same function, and as such,
an alternative way to format a `for` loop is:

```{bash, eval=FALSE}
for a_number in 1 2 3
do
    echo "In this iteration of the loop, the number is $a_number"
done
```

But that's one line longer and a bit awkwardly asymmetric.

:::

The aspect that is perhaps most difficult to understand is that in each iteration
of the loop, one element in the collection (in the example above, either `1`,
`2`, or `3`) **is being assigned** to the variable specified after `for`
(in the example above, `a_number`).

----

It is also important to realize that
**the loop runs sequentially for each item in the collection**,
and will run exactly as many times as there are items in the collection.

The following example, where we let the computer sleep for 1 second
before printing the date and time with the `date` command,
demonstrates that the loop is being executed sequentially:

```{bash, eval=TRUE}
for a_number in 1 2 3; do
    echo "In this iteration of the loop, the number is $a_number"
    sleep 1s          # Let the computer sleep for 1 second
    date              # Print the date and time
    echo "--------"
done
```

:::{.exercise}

### On Your Own: A simple loop {-}

Create a loop that will print:

```{bash-out}
morel is an Ohio mushroom  
destroying_angel is an Ohio mushroom  
eyelash_cup is an Ohio mushroom
```

:::{.callout-tip collapse="true"}
## Hints

- Just like we looped over 3 numbers above (`1`, `2`, and `3`),
  you want to loop over the three mushroom names,
  `morel`, `destroying_angel`, and `eyelash_cup`.

- Notice that when we specify the collection "manually",
  like we did above with numbers, the elements are simply separated by a space.
:::

:::{.callout-tip collapse="true"}
## Solution

```{bash, eval=TRUE}
for mushroom in morel destroying_angel eyelash_cup; do
    echo "$mushroom is an Ohio mushroom"
done
```

:::
:::

<br>

### Looping over files with globbing

In practice, we rarely manually list the collection of items we want to
loop over.
Instead, we commonly **loop over files** directly using _globbing_: 

```{bash, eval=FALSE}
# We make sure we only select gzipped FASTQ files using the `*fastq.gz` glob
for fastq_file in data/raw/*fastq.gz; do
    echo "File $fastq_file has $(wc -l < $fastq_file) lines."
    # More processing...
done
```

**This technique is extremely useful**, and I use it all the time.
Take a moment to realize that we're not doing a separate `ls` and storing
the results:
as mentioned, we can _directly_ use a globbing pattern to select our files.

If needed,
you can use your globbing / wild card skills to narrow down the file selection:

```{bash, eval=FALSE}
# Perhaps we only want to select R1 files (forward reads): 
for fastq_file in data/raw/*R1*fastq.gz; do
    # Some file processing...
done

# Or only filenames starting with A or B:
for fastq_file in data/raw/[AB]*fastq.gz; do
    # Some file processing...
done
```

:::{.callout-note  collapse="true"}
## At-home reading: Alternatives to looping with a glob

With genomics data,
the routine of looping over an entire directory of files,
or selections made with simple globbing patterns,
should serve you very well.

But in some cases,
you may want to iterate only over a specific list of filenames
(or partial filenames such as sample IDs)
that represent a complex selection.

- If this is a **short list**, you could directly specify it in the loop:

  ```{bash, eval=FALSE}
  for sample in A1 B6 D3; do
      R1=data/fastq/"$sample"_R1.fastq.gz
      R2=data/fastq/"$sample"_R2.fastq.gz
      # Some file processing...
  done
  ```

- If it is a **longer list**,
  you could create a simple text file with one line per sample ID / filename,
  and use command substitution as follows:

  ```{bash, eval=FALSE}
  for fastq_file in $(cat file_of_filenames.txt); do
      # Some file processing...
  done
  ```

In cases like this, _Bash arrays_
(basically, variables that consist of multiple values, like a vector in R)
or _`while` loops_ may provide more elegant solutions,
but those are outside the scope of this introduction.

:::

```{bash, eval=TRUE, echo=FALSE, error=FALSE}
rm -f Aug README* *txt
```
