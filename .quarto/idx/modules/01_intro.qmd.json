{"title":"RNAseq data analysis: introduction","markdown":{"yaml":{"title":"RNAseq data analysis: introduction","pagetitle":"Intro","highlight-style":"github","author":"Jelmer Poelstra"},"headingText":"Personal introductions","containsRefs":false,"markdown":"\n\n-----\n\n<br>\n\n::: {.callout-tip}\n\n\nIn our round of personal introductions, please mention:\n\n- Your level of experience, if any, with genomic data\n- Your level of experience, if any, with the Unix command line, R, and possibly other programming languages\n- Your currently planned or ongoing projects, if any, that involve genomic data\n- Your longer-term ambitions, if any, for working with genomic data or using programming skills\n- What you're particularly interested in learning here (if you know!)\n\n:::\n\n<br>\n\n## RNAseq data analysis\n\nRNAseq data analysis can be divided into two main parts:\n\n- A _bioinformatics-heavy part_ in which you generate **gene counts from the raw reads**.\n\n- A more _statistical part_ in which you **analyze the count table**\n  to create lists of differentially expressed genes and enriched functional categories.\n\n<br>\n\n### Part I: From reads to count table\n\nThis part starts with the raw reads from the (typically Illumina) sequencing machine\nto eventually generate a table with expression counts for each gene by each sample.\nThis part:\n\n  - Is usually done by\n    **sequentially running a series of programs with a command-line interface (CLI).**\n    Therefore, you typically use the Unix shell (command line) and shell scripts to do this.\n\n  - Processes large amounts of data,\n    and is generally not suitable to be run on a laptop or a desktop computer:\n    you should\n    **use a high-performance computing (HPC) center or cloud computing**.\n    (We will use the Ohio Supercomputer Center, OSC.)\n\n  - Is quite **standardized** and therefore,\n    a \"_pipeline_\" written for one dataset can be run for another one with minor changes,\n    even if the datasets are from completely different experiments or different species.\n\n<br>\n\n::: {.callout-note}\n\nBecause of the required technical skills and computing infrastructure,\nin combination with the standardized execution,\nthere are some alternatives available to doing this by yourself step-by-step[^1]:\n\n- Companies and university bioinformatics core facilities may be able to simply\n  **run this part for you**.\n\n- Services with graphical user interfaces (GUIs) are available, such as **[Galaxy](https://usegalaxy.org/)**.  \n  These run the same command-line programs, but wrap their execution in  a more\n  user-friendly way.\n\n**Such options are especially worth considering when you have no plans or ambitions\nto do much other genomics work in the future -- in other words,\nit may not be worth learning all the required technical skills just for one project.**\n\nWhen you plan to do multiple genomics projects and/or are generally interested in\ngaining computing skills, it's better to go ahead and learn to run these command-line\nprograms yourself.\n\n[^1]: Additionally, you can run standardized pipelines yourself,\n      which wrap many individual steps into a single executable workflow. \n      This especially becomes a time-efficient option once you know the computing basics,\n      and also aids with reproducibility and following best-practices.\n      For example, for RNAseq there is a [Nextflow nf-core RNAseq pipeline](https://nf-co.re/rnaseq).\n      The steps we will run fill follow this pipeline closely -- but in my opinion,\n      for initial learning, it is better to go step-by-step without a formalized pipeline.\n\n:::\n\n<br>\n\n### Part II: Analyzing the count table\n\nIn this part, you will analyze the table with gene counts for each sample,\nfor example to test for differential expression among groups (e.g., different treatments)\nand to test whether certain functional (GO, KEGG) gene categories have distinct expression\npatterns as a whole.\n\nThis part:\n\n- Is typically run entirely in R, using a number of specialized R \"packages\".\n\n- Is not particularly \"compute-intensive\":\n  your count table is a text file of typically only a few Mb,\n  and the analyses you're running do not need much time or computer memory.\n  As such, you can run this on your laptop or desktop computer.\n  (Though we will do it at OSC, mainly for the sake of continuity.)\n\n- Is much less standardized across projects:\n  the details of the analysis depend a lot on your experimental design and what you're interested in;\n  in addition, initial results may influence your next steps, and so on.\n\n<br><br>\n\n## What we'll cover\n\n_Note: we can tweak this based on your interests!_\n\n### Computing skills\n\nMany of these computing skills are needed only for part I below.\n\n- Introduction to the Ohio Supercomputer Center (OSC)\n- The VS Code (Code Server) text editor / IDE\n- Introduction to the Unix shell (\"command line\" / \"Bash\")\n- Shell scripts and loops\n- The `SLURM` compute job scheduler\n- Using and installing software at OSC\n- Project organization and reproducibility\n- Introduction to R??\n\n<br>\n\n### Analysis part I: From sequence reads to gene counts\n\n- Genomic file formats relevant to RNAseq: FASTA, FASTQ, BAM/SAM, GFF  \n- Raw read QC with `FastQC` and `MultiQC`\n- Read pre-processing with `TrimGalore` and `SortMeRNA` \n- Read alignment to a reference genome with `STAR`\n- Alignment QC with (at least) `MultiQC`\n- Gene expression counting with `Salmon`\n\n<br>\n\n### Analysis part II: Analyzing gene counts in R\n\n- Getting an overview of sample/group distinctiveness with a PCA\n- Differential expression analysis with `{DESeq2}`\n- KEGG and GO enrichment analysis with `{ClusterProfiler}`\n\n<br><br>\n\n## Workflow overview\n\n<p align=\"center\">\n<img src=img/workflow.png width=\"85%\">\n</p>\n\n<br><br>\n\n## Data source and workflow variations\n\n### Reference-based versus _de novo_ workflows\n\nWe will cover a **\"reference-based\" RNAseq workflow:\none where your focal organism has a reference genome assembly and annotation.\n\"De novo\" RNAseq workflows are necessary when you don't have a reference genome.\nThey are overall similar, but more time-consuming and bioinformatics-heavy,\nsince you will first have to assemble a transcriptome from the RNAseq data itself.\n\n### Gene-level versus transcript-level counts, and short versus long reads\n\nWe will focus on generating and analyzing **gene-level counts** rather than transcript-level counts:\nthat is, for each sample, we will obtain a single count for each gene even\nif that gene has multiple transcripts (isoforms).\nHowever, the program which we'll use for counting (`Salmon`) can also generate\ntranscript-level counts, and downstream transcript-level analysis is fairly similar too,\nthough this certainly adds a level of complexity.\n\nAdditionally, we will use short-read (Illumina) sequencing data,\nfor which transcript-level counts have much greater levels of uncertainty,\nsince most reads cannot directly be assigned to a specific transcript. \nConsider using long reads, such as\n[PacBio IsoSeq](https://www.pacb.com/products-and-services/applications/rna-sequencing/),\nif you're interested in transcript-level inferences.\n\n### \"Bulk\" versus single-cell RNAseq\n\nWe will focus on \"bulk\" RNAseq, where RNA was extracted from a large mixture of cells\nand possibly cell types.\nSingle-cell RNAseq analysis is similar for the first part (generating counts),\nbut differs more in the second part (count analysis).\n","srcMarkdownNoYaml":"\n\n-----\n\n<br>\n\n::: {.callout-tip}\n\n## Personal introductions\n\nIn our round of personal introductions, please mention:\n\n- Your level of experience, if any, with genomic data\n- Your level of experience, if any, with the Unix command line, R, and possibly other programming languages\n- Your currently planned or ongoing projects, if any, that involve genomic data\n- Your longer-term ambitions, if any, for working with genomic data or using programming skills\n- What you're particularly interested in learning here (if you know!)\n\n:::\n\n<br>\n\n## RNAseq data analysis\n\nRNAseq data analysis can be divided into two main parts:\n\n- A _bioinformatics-heavy part_ in which you generate **gene counts from the raw reads**.\n\n- A more _statistical part_ in which you **analyze the count table**\n  to create lists of differentially expressed genes and enriched functional categories.\n\n<br>\n\n### Part I: From reads to count table\n\nThis part starts with the raw reads from the (typically Illumina) sequencing machine\nto eventually generate a table with expression counts for each gene by each sample.\nThis part:\n\n  - Is usually done by\n    **sequentially running a series of programs with a command-line interface (CLI).**\n    Therefore, you typically use the Unix shell (command line) and shell scripts to do this.\n\n  - Processes large amounts of data,\n    and is generally not suitable to be run on a laptop or a desktop computer:\n    you should\n    **use a high-performance computing (HPC) center or cloud computing**.\n    (We will use the Ohio Supercomputer Center, OSC.)\n\n  - Is quite **standardized** and therefore,\n    a \"_pipeline_\" written for one dataset can be run for another one with minor changes,\n    even if the datasets are from completely different experiments or different species.\n\n<br>\n\n::: {.callout-note}\n\nBecause of the required technical skills and computing infrastructure,\nin combination with the standardized execution,\nthere are some alternatives available to doing this by yourself step-by-step[^1]:\n\n- Companies and university bioinformatics core facilities may be able to simply\n  **run this part for you**.\n\n- Services with graphical user interfaces (GUIs) are available, such as **[Galaxy](https://usegalaxy.org/)**.  \n  These run the same command-line programs, but wrap their execution in  a more\n  user-friendly way.\n\n**Such options are especially worth considering when you have no plans or ambitions\nto do much other genomics work in the future -- in other words,\nit may not be worth learning all the required technical skills just for one project.**\n\nWhen you plan to do multiple genomics projects and/or are generally interested in\ngaining computing skills, it's better to go ahead and learn to run these command-line\nprograms yourself.\n\n[^1]: Additionally, you can run standardized pipelines yourself,\n      which wrap many individual steps into a single executable workflow. \n      This especially becomes a time-efficient option once you know the computing basics,\n      and also aids with reproducibility and following best-practices.\n      For example, for RNAseq there is a [Nextflow nf-core RNAseq pipeline](https://nf-co.re/rnaseq).\n      The steps we will run fill follow this pipeline closely -- but in my opinion,\n      for initial learning, it is better to go step-by-step without a formalized pipeline.\n\n:::\n\n<br>\n\n### Part II: Analyzing the count table\n\nIn this part, you will analyze the table with gene counts for each sample,\nfor example to test for differential expression among groups (e.g., different treatments)\nand to test whether certain functional (GO, KEGG) gene categories have distinct expression\npatterns as a whole.\n\nThis part:\n\n- Is typically run entirely in R, using a number of specialized R \"packages\".\n\n- Is not particularly \"compute-intensive\":\n  your count table is a text file of typically only a few Mb,\n  and the analyses you're running do not need much time or computer memory.\n  As such, you can run this on your laptop or desktop computer.\n  (Though we will do it at OSC, mainly for the sake of continuity.)\n\n- Is much less standardized across projects:\n  the details of the analysis depend a lot on your experimental design and what you're interested in;\n  in addition, initial results may influence your next steps, and so on.\n\n<br><br>\n\n## What we'll cover\n\n_Note: we can tweak this based on your interests!_\n\n### Computing skills\n\nMany of these computing skills are needed only for part I below.\n\n- Introduction to the Ohio Supercomputer Center (OSC)\n- The VS Code (Code Server) text editor / IDE\n- Introduction to the Unix shell (\"command line\" / \"Bash\")\n- Shell scripts and loops\n- The `SLURM` compute job scheduler\n- Using and installing software at OSC\n- Project organization and reproducibility\n- Introduction to R??\n\n<br>\n\n### Analysis part I: From sequence reads to gene counts\n\n- Genomic file formats relevant to RNAseq: FASTA, FASTQ, BAM/SAM, GFF  \n- Raw read QC with `FastQC` and `MultiQC`\n- Read pre-processing with `TrimGalore` and `SortMeRNA` \n- Read alignment to a reference genome with `STAR`\n- Alignment QC with (at least) `MultiQC`\n- Gene expression counting with `Salmon`\n\n<br>\n\n### Analysis part II: Analyzing gene counts in R\n\n- Getting an overview of sample/group distinctiveness with a PCA\n- Differential expression analysis with `{DESeq2}`\n- KEGG and GO enrichment analysis with `{ClusterProfiler}`\n\n<br><br>\n\n## Workflow overview\n\n<p align=\"center\">\n<img src=img/workflow.png width=\"85%\">\n</p>\n\n<br><br>\n\n## Data source and workflow variations\n\n### Reference-based versus _de novo_ workflows\n\nWe will cover a **\"reference-based\" RNAseq workflow:\none where your focal organism has a reference genome assembly and annotation.\n\"De novo\" RNAseq workflows are necessary when you don't have a reference genome.\nThey are overall similar, but more time-consuming and bioinformatics-heavy,\nsince you will first have to assemble a transcriptome from the RNAseq data itself.\n\n### Gene-level versus transcript-level counts, and short versus long reads\n\nWe will focus on generating and analyzing **gene-level counts** rather than transcript-level counts:\nthat is, for each sample, we will obtain a single count for each gene even\nif that gene has multiple transcripts (isoforms).\nHowever, the program which we'll use for counting (`Salmon`) can also generate\ntranscript-level counts, and downstream transcript-level analysis is fairly similar too,\nthough this certainly adds a level of complexity.\n\nAdditionally, we will use short-read (Illumina) sequencing data,\nfor which transcript-level counts have much greater levels of uncertainty,\nsince most reads cannot directly be assigned to a specific transcript. \nConsider using long reads, such as\n[PacBio IsoSeq](https://www.pacb.com/products-and-services/applications/rna-sequencing/),\nif you're interested in transcript-level inferences.\n\n### \"Bulk\" versus single-cell RNAseq\n\nWe will focus on \"bulk\" RNAseq, where RNA was extracted from a large mixture of cells\nand possibly cell types.\nSingle-cell RNAseq analysis is similar for the first part (generating counts),\nbut differs more in the second part (count analysis).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"highlight-style":"github","output-file":"01_intro.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":"cosmo","title":"RNAseq data analysis: introduction","pagetitle":"Intro","author":"Jelmer Poelstra"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}