{
  "hash": "3468fa6fc428c3b5f53f5a35d85ab46c",
  "result": {
    "markdown": "---\ntitle: \"Genomic data files\"\nsubtitle: \"And exploring them in the shell\"\npagetitle: \"Unix shell part II\"\nhighlight-style: github\nnumber-sections: true\nengine: knitr\nauthor: Jelmer Poelstra\ndate: 2023-08-11\n---\n\n::: {.cell}\n\n:::\n\n\n-------\n\n<br>\n\n### Add: making data read-only\n\n### Add: checking file integrity\n\n### Compressed Files\n\nSince these are FASTQ files, let's print 8 lines\n(a multiple of 4 -- it will become clear why shortly).\n\nNow let's start to explore our FASTQ files a bit.\n\n```bash\nls -lh data/fastq\n```\n```{.bash-out}\ntotal 38M\n-rw-r--r-- 1 jelmer PAS0471 4.1M Jul 27 11:53 ASPC1_A178V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.2M Jul 27 11:53 ASPC1_A178V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.1M Jul 27 11:53 ASPC1_G31V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.3M Jul 27 11:53 ASPC1_G31V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.1M Jul 27 11:53 Miapaca2_A178V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.3M Jul 27 11:53 Miapaca2_A178V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.1M Jul 27 11:53 Miapaca2_G31V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.3M Jul 27 11:53 Miapaca2_G31V_R2.fastq.gz\n```\n\nThe FASTQ files all have a `.gz` extension and are listed in red,\nindicating they are \"gzip-compressed\".\nThis is a common type of compression for large genomic files.\n\nBecause they're compressed, means we can't just open them up and look inside --\nwe need to uncompress them first.\nThe `gunzip` command would allow us to do this:\nit uncompresses the file it's given and writes the uncompressed version to a new file.\n\nWe could do this, but there's another approach.\nFASTQ files can get big,\nand sometimes it helps to be able to keep them compressed as much as possible.\nIt's a good time for us to explore the pipe.\n\n```bash\nhead -n 8 x.fastq.gz\n```\n  \n<p align=\"left\"><img src=img/head2.png width=\"80%\"></p>\n\nThis isn't what we want --\nwe're seeing the first 8 lines of the compressed files, which is not helpful. \n\n### `zcat`\n\nThe `zcat` function prints human-readable contents of a gzip-compressed file to the screen.\nWe can try running it on the file, but remember the file is pretty big --\nthere are lots of lines of text in there that will all get printed to the screen.\nInstead, we can pipe the output of `zcat` to the `head` command.\n\n```bash\nzcat x.fastq.gz | head -n 8\n```\n\n<p align=\"left\"><img src=img/head4.png width=\"80%\"></p>\n\nMuch better -- this is what the raw RNAseq data look like!\n\n:::{.callout-note}\n#### FASTQ format\n\nIf you're not familiar with it,\nFASTQ is a very common format for the raw sequence data output by high-throughput\nmachines &mdash;\ncertainly when you have Illumina sequencing done,\nyou will almost always receive the sequences in this format.\nThese are plain text files,\nand each sequence that is read by the sequencer is represented by 4 lines:\n\n1. A name (header) line\n2. The sequence itself\n3. A plus sign (`+`)\n4. Quality scores corresponding to each base position in the sequence\n\n:::\n\n:::{.callout-warning}\nTo get the number of lines (= number sequences x 4 -- see below)\nfor a gzipped FASTQ file,\nit's important to use  `zcat x.fastq.gz | wc -l` instead of `wc -l x.fastq.gz`,\nbecause the compressed file does not have the same number of lines!\n:::\n\n<br>\n\n### `wc`\n\nSince each read in a FASTQ file is represented by 4 lines,\nwe should expect the number of lines in each of the FASTQ files to be a multiple of 4.\nLet's check one.\nThe `wc` command stands for word count, but by default,\nit returns the number of words, lines, and characters in a file.\nThe `-l` option tells it to return just the number of lines,\nso we'll use it since that's all we're interested in right now.\nAnd remember, we'll want to do this on the uncompressed data.\n\n```bash\nzcat x.fastq.gz | wc -l\n```\n\n::: {.callout-note}\n```bash\nwc -l file\n```\n\n```bash\nzcat file | wc -l\n```\n\n```bash\nwc -l < file\n```\n:::\n\n### `grep`\n\n`grep` allows you to search through a file for specific patterns of text and\nreturns the matching lines.\nFor example, let's say we wanted to see what sequences in sample SRR7609467\ncontain the sequence \"ACCGATACG\":\n\n```bash\nzcat x.fastq.gz | grep \"ACCGATACG\"\n```\n\n<p align=\"left\"><img src=img/grep2.png width=\"80%\"></p>  \n\nTODO: Mention other \"data commands\" like `cut`, `sort`, and `uniq` --\nrefer to some reference??\n\n:::{.exercise}\n#### On Your Own: Finding a Sequence {-}\n\nHow many sequences in sample SRR7609467 contain the sequence \"CCAGTA\"?\n\n<details><summary>Hint (click here)</summary>\nPipe the results of the grep to `wc -l`.\nAlternatively, check out the `-c` option to grep in the `man` page.\n</details>\n  \n<details><summary>Solutions (click here)</summary>\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat SRR7609467.fastq.gz | grep 'CCAGTA' | wc -l\n```\n:::\n\n\n**OR**\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat SRR7609467.fastq.gz | grep -c 'CCAGTA'\n```\n:::\n\n\n</details>\n:::   \n\n<br>\n\n## Downloading Files from the web\n\nTo download a file to OSC,\nyou can't just open a web browser and download it directly to there.\nOne way would be to download it to your own computer and then transfer\nit to OSC.\n\nA more direct approach is to use a command in your OSC Unix shell.\n\nTo analyze our RNAseq data, we'll need two files related to our reference\ngenome &mdash; the genome that we want to map our RNAseq reads to,\nand whose gene annotations will form the basis of the gene counts that we'll get.\n\nSpecifically, we'll need the nucleotide FASTA file with the genome assembly itself,\nand a so-called GFF file, a tabular file with the genomic coordinates and other information\nfor genes and other genomic features.\n\n### `wget`\n\n`wget` is one command that allows you to download files from the web\n(`curl` is another very commonly used one, with much the same functionality).\n\nTo download a file to our working directory,\nall you need is to tell `wget` about the URL (web address) to the file\nyou want to download.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/499/845/GCF_000499845.1_PhaVulg1_0/GCF_000499845.1_PhaVulg1_0_genomic.fna.gz\n```\n:::\n\n\n:::{.exercise}\n#### On Your Own: Preview a FASTA file {-}\n\nTry previewing the contents of the reference genome file you just downloaded.\n\n<details><summary>Hint (click here)</summary>\nRemember, the file is gzip-compressed.\nUse `zcat` and pipe the results to `head`.\n</details>\n  \n<details><summary>Solution (click here)</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat Pvulg.fa.gz | head\n```\n:::\n\n\n</details>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}