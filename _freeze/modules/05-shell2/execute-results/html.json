{
  "hash": "7805901ba095144088df10a2a7042b7f",
  "result": {
    "markdown": "---\ntitle: \"The Unix Shell - Part II\"\nsubtitle: \"And an introduction to FASTQ and FASTA files\"\npagetitle: \"Unix Shell\"\nhighlight-style: github\nnumber-sections: true\nengine: knitr\nauthor: Jelmer Poelstra\ndate: 2023-08-04\n---\n\n::: {.cell}\n\n:::\n\n\n-------\n\n<br>\n\n## Keyboard shortcuts\n\n| Shortcut | Command | Function\n|---------------------|------------------------------------------------|\n| <kbd>Tab</kbd>                                    | Tab completion! Files, commands, etc. <br> Double <kbd>Tab<kbd> to show options when <br> multiple are still available.|\n| <kbd>&#8679;</kbd> / <kbd>&#8681;</kbd>           | Cycle through command history|\n| <kbd>CTRL</kbd> + <kbd>R</kbd>                    | Enter characters to search for in the history <br> (repeat <kbd>CTRL</kbd> + <kbd>R</kbd> to keep going back, <br> <kbd>ENTER</kbd> to put command in prompt) |\n| <kbd>CTRL</kbd> + <kbd>C</kbd>                    | Abort (kill) current process |\n| <kbd>CTRL</kbd> + <kbd>D</kbd>                    | Exit the current shell (/ interactive job) (`exit`) |\n| <kbd>CTRL</kbd> + <kbd>Z</kbd>                    | Suspend (pause) a process, then use `bg` to move to background (`fg`) |\n| <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>     | Copy     |\n| <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>V</kbd>     | Paste    |\n| <kbd>Ctrl</kbd>+<kbd>A</kbd>                      | Go to beginning of line |\n| <kbd>Ctrl</kbd>+<kbd>E</kbd>                      | Go to end of line |\n| <kbd>Ctrl</kbd>+<kbd>U</kbd>                      | Cut to beginning of line |\n| <kbd>Ctrl</kbd>+<kbd>K</kbd>                      | Cut to end of line |\n| <kbd>Ctrl</kbd>+<kbd>W</kbd>                      | Cut previous word |\n| <kbd>Ctrl</kbd>+<kbd>Y</kbd>                      | Paste previously cut element |\n| **<kbd>Alt</kbd>+<kbd>.</kbd>**                   | Paste last argument of last command |\n\n- <kbd>Ctrl</kbd>+<kbd>C</kbd> to kill the currently running command.\n  Try this:\n    \n    ```sh\n    # For each, see what happens, then press Ctrl + C\n    $ sleep 60s\n    \n    $ echo \"Missing quote\"  # Omit closing quote!\n    ```\n  \n- <kbd>Ctrl</kbd>+<kbd>D</kbd> or typing `exit` will exit a shell.\n\n- Press <kbd>Ctrl</kbd>+<kbd>A</kbd> to move to the beginning of the line,   \n  and add **`ls`** to the beginning: `ls /fs/project/PAS1855`.  \n  \n  Press <kbd>Enter</kbd> (anywhere on the line!).\n\n- Press <kbd>&#8679;</kbd> to get the previous command back on the prompt,  \n  and then press <kbd>Ctrl+U</kbd> to delete until the beginning of the line.\n  \n- <kbd>Ctrl</kbd>+<kbd>U</kbd> actually *cut* the text:\n  \"Yank\" it back with <kbd>Ctrl</kbd>+<kbd>Y</kbd>.\n\n- Create a directory for yourself using `mkdir`:\n  ```sh\n  $ mkdir /fs/ess/PAS1855/users/$USER\n  ```\n  \n- Move into this dir using `cd` &ndash; after typing `cd` and a space,\n  press <kbd>Alt</kbd>+<kbd>.</kbd>:\n  ```sh\n  $ cd /fs/ess/PAS1855/users/$USER\n  ```\n\n<br>\n\n## Wildcards\n\n| Wildcard       | Matches                                                      |\n|---------------|--------------------------------------------------------------|\n| *             | Any number of any character, including nothing               |\n| ?             | Any single character                                         |\n| [] and [^]    | One or none (`^`) of the \"character set\" within the brackets |\n\n<br>\n\n## Commands for file organization\n\n### `mkdir`\n\nThe `mkdir` command allows you to create a new directory.\nCreate one for yourself in the current directory ... FINISH\n\n```bash\nmkdir results scripts\n```\n\n```bash\nmkdir -p\n```\n\n::: {.callout-caution}\n#### The trouble with spaces\n- Because spaces are special characters used to separate commands from options\n  and arguments, etc., using them in file names is inconvenient at best:\n  \n  ```sh\n  # You should be in /fs/ess/PAS1855/users/$USER/CSB/unix/sandbox\n  ls\n  \n  cd Papers and reviews     # NOPE!\n  \n  cd Papers\\ and\\ reviews   # \\ to escape each individual space\n  cd \"Papers and reviews\"   # Quotes to escape special characters\n  ```\n:::\n\n### `cp`\n\nThe data files in the `data/fastq` directory are FASTQ formatted files from an RNA experiment,\nand are what we'll be analyzing as we go through the workshop.\nWe'll talk more about them soon, but for now, let's make sure everyone has a copy of the data.\nWe'll copy the `data` directory and its contents into the new directory you just made. \n\nThe `cp` command allows you to copy files or directories from one location to another.\nIt has 2 required arguments -- what you want to copy, and where you want to copy it to.\n\nLet's start with what we want to copy.\nIt's the `data` directory and all of its contents.\n\nNotice in the diagram above that `data` is at the same level in the directory structure as our current working directory, participants.\nThis means using `data` as a **relative path** won't work,\nbecause the computer looks down the directory structure (it will see the contents of 'participants').\nBut there's a way to deal with that.\nWe can use `..` to move us up a level in the directory structure.\n\n```bash\ncp ...\n```\n\nNotice we get a message that it omitted copying the directory `data` (which is what we wanted to copy).\nIndeed, the copy didn't work (you can `ls` the contents of the target directory to check -- it will still be empty).\n`cp` works in this simplest form with individual files, but not with directories that have contents inside them.\nIf you want to copy a directory and all of its contents, we need one of those options that modify the behavior of the `cp` command.\nIn this case, `-r`, which tells it to copy in a recursive manner.\n\n### Command History\n\nAnd this is a good spot to introduce the **Command History**.\nAt the prompt, try hitting the up arrow.\nA record of all your previous commands is kept, so you can scroll back through them.\nUse this to get the previous `cp` command, and then add the `-r` argument.\n\n```bash\ncp -r ...\n```\n\n```bash\nls\n```\n\n### `mv`\n\n<br>\n\n## Working With Text Files\n\nNow let's start to explore our FASTQ files a bit.\nIn preparation, it's a good chance to practice a few of the commands we've seen so far.\n\n:::{.exercise}\n\n#### On Your Own: Explore the Files {-}\n\nSet your working directory to the `data/fastq` directory inside the folder you\ncreated for yourself.\nThen list the contents of that `fastq` directory.\nHow many files are in there? See if you can get the sizes of each file.\n\n<details><summary>Hint (click here)</summary>\n\nUse `cd` and a relative path (`<your_dir>/data/fastq/`) to change you working directory.\n   \nOnce you're there, use `ls` to list the contents of the current directory.\nRecall the option that we used above to give more detailed information about each file, or  check out the `man` page for `ls`.\n   \n</details>\n\n<details><summary>Solutions (click here)</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd <your_dir>/data\n\nls\n\nls -l\n```\n:::\n\n\n</details>\n::: \n\n<br>\n\n### Compressed Files\n\nYou might have noticed these files all have a `.gz` extension, indicating they are 'gzip-compressed'.\nThis is a common type of compression for large genomic-scale files.\nThe fact that they're compressed means we can't just open them up and look inside --\nwe need to uncompress them first.\nThe `gunzip` command would allow us to do this:\nit uncompresses the file it's given and writes the uncompressed version to a new file.\n\nWe could do this, but there's another approach.\nFASTQ files can get big,\nand sometimes it helps to be able to keep them compressed as much as possible.\nIt's a good time for us to explore the pipe.\n\n<br>\n\n### `|` (pipe)\n\nWe talked earlier about that commands nearly always print their output is printed to the screen.\nBut you can also **redirect the output**,\nand there are three primary ways to redirect it:\n\n- With `>`, which is followed by the name of a text file the output will be written to\n  \n- With  `>>`, which is similar to `>` but will **append** the output\n  (that is, it won't overwrite any existing content like `>`)\n\n- With `|` (pipe), which takes the output of one command and \"pipes\" it as input\n  for a subsequent command.\n  \nLet's try to preview the contents of one of the compressed files. \n\n### `head`\n\nThe `head` command is a great way to preview the contents of a text file.\nBy default, `head` prints the first 10 lines of a file.\nSince these are FASTQ files, let's print 8 lines\n(a multiple of 4 -- it will become clear why shortly).\nWe can use the `-n` argument to specify the number of lines that  will be returned.\n\n```bash\nhead -n 8 x.fastq.gz\n```\n  \n<p align=\"left\"><img src=img/head2.png width=\"80%\"></p>\n\nThis isn't what we want --\nwe're seeing the first 8 lines of the compressed files, which is not helpful. \n\n### `zcat`\n\nThe `zcat` function prints human-readable contents of a gzip-compressed file to the screen.\nWe can try running it on the file, but remember the file is pretty big --\nthere are lots of lines of text in there that will all get printed to the screen.\nInstead, we can pipe the output of `zcat` to the `head` command.\n\n```bash\nzcat x.fastq.gz | head -n 8\n```\n\n<p align=\"left\"><img src=img/head4.png width=\"80%\"></p>\n\nMuch better -- this is what the raw RNAseq data look like!\n\n:::{.callout-warning}\nTo get the number of lines (= number sequences x 4 -- see below)\nfor a gzipped FASTQ file,\nit's important to use  `zcat x.fastq.gz | wc -l` instead of `wc -l x.fastq.gz`,\nbecause the compressed file does not have the same number of lines!\n:::\n\n<br>\n\n### FASTQ Format\n\nIf you're not familiar with it, FASTQ is a very common format for genomic data files.\nThe raw data produced by a high-throughput sequencer will almost certainly be returned to you in this format.\nThese are plain text files, and each sequence that is read by the sequencer is represented by 4 lines:\n\n1. A name (header) line\n2. The sequence itself\n3. A plus sign (`+`)\n4. Quality scores corresponding to each base position in the sequence\n\n### `wc`\n\nSince each read in a FASTQ file is represented by 4 lines,\nwe should expect the number of lines in each of the FASTQ files to be a multiple of 4.\nLet's check one.\nThe `wc` command stands for word count, but by default,\nit returns the number of words, lines, and characters in a file.\nThe `-l` option tells it to return just the number of lines,\nso we'll use it since that's all we're interested in right now.\nAnd remember, we'll want to do this on the uncompressed data.\n\n```bash\nzcat x.fastq.gz | wc -l\n```\n\n::: {.callout-note}\n```bash\nwc -l file\n```\n\n```bash\nzcat file | wc -l\n```\n\n```bash\nwc -l < file\n```\n:::\n\n### `grep`\n\n`grep` allows you to search through a file for specific patterns of text and returns the matching lines.\nFor example, let's say we wanted to see what sequences in sample SRR7609467\ncontain the sequence \"ACCGATACG\":\n\n```bash\nzcat x.fastq.gz | grep \"ACCGATACG\"\n```\n\n<p align=\"left\"><img src=img/grep2.png width=\"80%\"></p>  \n  \n:::{.exercise}\n#### On Your Own: Finding a Sequence {-}\n\nHow many sequences in sample SRR7609467 contain the sequence \"CCAGTA\"?\n\n<details><summary>Hint (click here)</summary>\nPipe the results of the grep to `wc -l`.\nAlternatively, check out the `-c` option to grep in the `man` page.\n</details>\n  \n<details><summary>Solutions (click here)</summary>\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat SRR7609467.fastq.gz | grep 'CCAGTA' | wc -l\n```\n:::\n\n\n**OR**\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat SRR7609467.fastq.gz | grep -c 'CCAGTA'\n```\n:::\n\n\n</details>\n:::   \n\n<br>\n\n## Downloading Files from the Web\n\nTo download a file to OSC,\nyou can't just open a web browser and download it directly to there.\nOne way would be to download it to your own computer and then transfer\nit to OSC.\n\nA more direct approach is to use a command in your OSC Unix shell.\n\nTo analyze our RNAseq data, we'll need two files related to our reference\ngenome &mdash; the genome that we want to map our RNAseq reads to,\nand whose gene annotations will form the basis of the gene counts that we'll get.\n\nSpecifically, we'll need the nucleotide FASTA file with the genome assembly itself,\nand a so-called GFF file, a tabular file with the genomic coordinates and other information\nfor genes and other genomic features.\n\n:::{.exercise}\n#### On Your Own: Create a Directory {-}\n\nCreate a new (empty) directory named `reference` that will later store the\nreference genome for our analyses.\nPut it in your own directory inside `participants`.\nThen make this `reference` directory your working directory.\n\n<details><summary>Hint (click here)</summary>\nUse the `mkdir` command (and `cd` as necessary).\n\nRemember that `..` moves you up/back one directory, and these can be combined.\nFor example, `../../../` would move you up/back 3 directories.\n</details>\n  \n<details><summary>Solution (click here)</summary>\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir ../../reference\n  \ncd ../../reference\n```\n:::\n\n\n**OR**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../../\n  \nmkdir reference\n   \ncd reference\n```\n:::\n\n\n</details>\n:::\n\n### `wget`\n\n`wget` is one command that allows you to download files from the web\n(`curl` is another very commonly used one, with much the same functionality).\n\nTo download a file to our working directory,\nall you need is to tell `wget` about the URL (web address) to the file\nyou want to download.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/499/845/GCF_000499845.1_PhaVulg1_0/GCF_000499845.1_PhaVulg1_0_genomic.fna.gz\n```\n:::\n\n\n:::{.exercise}\n#### On Your Own: Preview a FASTA file {-}\n\nTry previewing the contents of the reference genome file you just downloaded.\n\n<details><summary>Hint (click here)</summary>\nRemember, the file is gzip-compressed.\nUse `zcat` and pipe the results to `head`.\n</details>\n  \n<details><summary>Solution (click here)</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat Pvulg.fa.gz | head\n```\n:::\n\n\n</details>\n:::\n\nOK, now we've got our raw data (FASTQ) and our reference genome (FASTA).\nThis is a good start in terms of getting ready to start analyzing the data.\nOne more thing we can do now is try to understand a little bit about the samples themselves.\nThere is a tab-separated text file named `meta.tsv` in the `data/meta` directory. \net's take a look at its contents...\n\n### `less`\n\n`less` is a command that opens up a text file within your shell.\nOnce you're finished viewing the file, type <kbd>q</kbd> to quit and return to your prompt.\n\n<br>\n\n## A List of Commonly-used Commands\n\nBelow is a list of common Unix commands:\nsome truly ubiquitous ones,\nas well as ones dealing with files and data\n(but I'm omitting, e.g., the many let's say \"system managent\" commands).\n\nThey are grouped into some general categories:\n\n- **Navigating in the Terminal**\n  - `pwd`: returns (prints) your working directory\n  - `cd`: change working directory\n- **Viewing Files**\n  - `cat`: print the entire contents of a file\n  - `head`: print the first lines of a file\n  - `tail`: print the last lines of a file\n  - `less`: view the contents of a file in a \"pager\" (press `q` to quit/exit!)\n- **Managing/Organizing Files**\n  - `ls`: list contents of directory\n  - `mkdir`: create a new directory\n  - `rm`: remove/delete a file or directory\n  - `cp`: copy files/directories to a new location\n  - `mv`: move/rename files/directories to a new location\n- **Working With Compressed Files**\n  - `gzip`/`gunzip`: compress/uncompress a file with gzip compression (`.gz`)\n  - `unzip`: uncompress a zip (`.zip`) file\n  - `zcat`: print the contents of a compressed file to the screen\n- **Assessing Files**\n  - `md5`/`shasum`: check file integrity via \"checksums\" (fingerprints) for a file\n  - `grep`: search a text file for lines containing a pattern of text\n  - `wc`: return number of lines, words, characters in a file\n- **Editing Files (or other data)**\n  - `sort`\n  - `uniq`\n  - `cut`\n  - `tr`\n  - `sed`\n  - `awk`\n- **Obtaining/Sharing Files**\n  - `curl`: download a file from online\n  - `wget`: download a file from online\n- **Getting Info About a Command**\n  - `man`: get help (manual) for a command\n- **Shell Features**\n  - Tab completion\n  - Command History (up arrow)\n  - <kbd>Ctrl</kbd>+<kbd>c</kbd>\n- **Special Notation**\n  - `|`\n  - `~`\n  - `.`\n  - `..`\n  - `$PATH`\n  - `$HOME`\n- **Wildcards**\n  - `*`\n  - `?`\n  - `[]`\n  - `^`\n\nWhile it's not an exhaustive list, getting a grasp on the commands and\nfeatures above will go a long way in allowing you to work in the Unix shell.\nWe should see nearly all of these in action during our sessions.\n\n## Further resources\n\n- [OSC's UNIX Basics](https://www.osc.edu/documentation/tutorials/unix_basics)\n- <https://www.learnenough.com/command-line-tutorial>\n- <https://cvw.cac.cornell.edu/Linux/>\n- <http://www.ee.surrey.ac.uk/Teaching/Unix/>\n- <https://www.udacity.com/course/linux-command-line-basics--ud595>\n- <http://moo.nac.uci.edu/~hjm/How_Programs_Work_On_Linux.html>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}