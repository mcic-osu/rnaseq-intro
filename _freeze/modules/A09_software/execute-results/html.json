{
  "hash": "1efb1e53474904f969c53b837245af27",
  "result": {
    "markdown": "---\ntitle: \"Using Software at OSC\"\nsubtitle: \"Loading existing modules and installing and using software with _Conda_\" \npagetitle: \"Software at OSC\"\nhighlight-style: github\nnumber-sections: true\nengine: knitr\nauthor: Jelmer Poelstra\ndate: 2023-09-08\n---\n\n::: {.cell}\n\n:::\n\n\n-------\n\n<br>\n\n::: {.callout-important}\n## Under construction \nThis page is nearly finished, only the Container section needs to be completed.\n:::\n\n## Overview & Getting started\n\nTo analyze RNAseq data and other genomics data sets,\na typical workflow includes using a sequence of specialized bioinformatics software.\n\nAt OSC, there are system-wide installations of a number of bioinformatics programs.\nAs we briefly [saw earlier for FastQC](./A07_overview.qmd#running-a-cli-program-interactively),\nand will talk about more here, we do need to \"load\" such programs.\n\nUnfortunately,\nthe collection of bioinformatics programs at OSC is not very comprehensive,\nand some of the available programs only come in relatively old versions.\nWe therefore also need a way to make other programs available to ourselves\nat OSC.\n\n#### Start VS Code and open your folder {-}\n\nAs always, we'll be working in VS Code &mdash;\nif you don't already have a session open, see below how to do so.\n\n**Make sure to open your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir**,\neither by using the `Open Folder` menu item,\nor by clicking on this dir when it appears in the `Welcome` tab.\n\n:::{.callout-tip collapse=\"true\"}\n## Starting VS Code at OSC - with a Terminal (Click to expand)\n1. Log in to OSC's OnDemand portal at <https://ondemand.osc.edu>.\n\n2. In the blue top bar, select `Interactive Apps`\n   and then near the bottom of the dropdown menu, click `Code Server`.\n\n3. In the form that appears on a new page:\n   - Select an appropriate OSC project (here: `PAS0471`)\n   - For this session, select `/fs/ess/PAS0471` as the starting directory\n   - Make sure that `Number of hours` is at least `2`\n   - Click `Launch`.\n\n4. On the next page, once the top bar of the box has turned green\n   and says `Runnning`, click `Connect to VS Code`.\n\n<figure><p align=\"center\"><img src=img/osc-code-launch_ed.png width=\"80%\"></p></figure>\n\n5. Open a Terminal by clicking\n   &nbsp; {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.\n   (Or use one of the keyboard shortcuts:\n   <kbd>Ctrl</kbd>+<kbd>\\`</kbd> (backtick) or\n   <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>.)\n\n6. In the `Welcome` tab under `Recent`,\n   you should see your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir listed:\n   click on that to open it.\n   Alternatively, use\n   &nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`\n   to open that dir in VS Code.\n:::\n\n:::{.callout-warning collapse=\"true\"}\n#### Don't have your own dir with the data? (Click to expand)\nIf you missed the last session, or deleted your `rnaseq_intro` dir entirely,\nrun these commands to get a (fresh) copy of all files you should have so far:\n\n```bash\nmkdir -p /fs/ess/PAS0471/$USER/rnaseq_intro\ncp -r /fs/ess/PAS0471/demo/202307_rnaseq /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nAnd if you do have an `rnaseq_intro` dir,\nbut you want to start over because you moved or removed some of the files\nwhile practicing, then delete the dir before your run the commands above:\n\n```bash\nrm -r /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nYou should have at least the following files in this dir:\n\n```{.bash-out}\n/fs/ess/PAS0471/demo/202307_rnaseq\n├── data\n│   └── fastq\n│       ├── ASPC1_A178V_R1.fastq.gz\n│       ├── ASPC1_A178V_R2.fastq.gz\n│       ├── ASPC1_G31V_R1.fastq.gz\n│       ├── ASPC1_G31V_R2.fastq.gz\n│       ├── md5sums.txt\n│       ├── Miapaca2_A178V_R1.fastq.gz\n│       ├── Miapaca2_A178V_R2.fastq.gz\n│       ├── Miapaca2_G31V_R1.fastq.gz\n│       └── Miapaca2_G31V_R2.fastq.gz\n├── metadata\n│   └── meta.tsv\n└── README.md\n│   └── ref\n│       ├── GCF_000001405.40.fna\n│       ├── GCF_000001405.40.gtf\n```\n:::\n\n<br>\n\n## Loading software at OSC with _Lmod_ modules\n\nOSC administrators manage software with the _Lmod_ system of software modules.\nFor us users, this means that even though a lot of software is installed,\n**most of it can only be used after we explicitly load it.**  \n(That may seem like a drag, but on the upside,\nthis practice enables the use of different versions of the same software,\nand of mutually incompatible software on a single system.)\n\nWe can load, unload, and search for available software modules using the\n**`module` command** and its various subcommands.\n\n### Checking whether a program is available\n\nThe OSC website has a\n[list of installed software](<https://www.osc.edu/resources/available_software/software_list>).\nYou can also search for available software in the shell\nusing two subtly different commands:\n  \n  - `module spider` lists modules that are installed.\n  - `module avail` lists modules that *can be directly loaded*,\n    given the current environment\n    (i.e., depending on which other software has been loaded).\n\nSimply running `module spider` or `module avail` would spit out the full lists\nof installed/available programs &mdash;\nit is more useful to add a **search term** as an argument to these commands:\n\n```bash\nmodule spider miniconda\n```\n``` {.bash-out}\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  miniconda3:\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     Versions:\n        miniconda3/4.10.3-py37\n        miniconda3/4.12.0-py38\n        miniconda3/4.12.0-py39\n        miniconda3/23.3.1-py310\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  For detailed information about a specific \"miniconda3\" module (including how to load the modules) use the module's full name.\n  For example:\n\n     $ module spider miniconda3/4.12.0-py39\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n```bash\nmodule avail miniconda\n```\n```{.bash-out}\n------------------------------------------------------------------------------------------------------ /apps/lmodfiles/Core -------------------------------------------------------------------------------------------------------\n   miniconda3/4.10.3-py37 (D)    miniconda3/4.12.0-py38    miniconda3/4.12.0-py39    miniconda3/23.3.1-py310\n\n  Where:\n   D:  Default Module\n```\n\nAs stated at the bottom of the output below,\nthe `(D)` in the `module avail` output above marks the default version of the program:\nthis is the version of the program that will be loaded if we don't specify\na version ourselves (see examples below).\nThe `module spider` command does not provide this information.\n\n<br>\n\n### Loading software\n\nAll other _Lmod_ software functionality is also accessed using `module`\n\"subcommands\" (we call `module` the command and e.g. `spider` the subcommand).\nFor instance, to make a program available to us we need to **_load_ a module**:\n  \n```bash\n# Load a module:\nmodule load miniconda3               # Load the default version\nmodule load miniconda3/23.3.1-py310  # Load a specific version\n```\n\n::: {.callout-tip}\n#### Modules do not remain loaded across separate shell sessions \nModule loading does _not_ persist across shell sessions.\nWhenever you get a fresh shell session\n(including but not limited to after logging into OSC again),\nyou will have to (re)load any modules you want to use!\n:::\n\nTo check which modules have been loaded, we use `module list` &mdash;\nnote that the output includes several _automatically_ loaded modules:\n\n```bash\nmodule list\n```\n```{.bash-out}\nCurrently Loaded Modules:\n  1) xalt/latest   2) gcc-compatibility/8.4.0   3) intel/19.0.5   4) mvapich2/2.3.3   5) modules/sp2020\n```\n\n:::{.callout-note collapse=\"true\"}\n## Unloading modules (Click to expand)\n\nOccasionally, when you run into conflicting (mutually incompatible) modules,\nit can be useful to unload modules,\nwhich you can do as follows:\n\n```bash\nmodule unload python        # Unload a module\nmodule purge                # Unload all modules\n```\n:::\n\n<br>\n\n### A practical example: _FastQC_ again\n\nFirst, let's test that we indeed _cannot_ currently use _FastQC_\nby running `fastqc` with the `--help` flag:\n\n```bash\nfastqc --help\n```\n``` {.bash-out}\nbash: fastqc: command not found\n```\n\n:::{.callout-tip}\n##### Help!\nA solid majority of command-line programs can be run with with a `--help`\n(and/or `-h`) flag, and this is often a good thing to try first,\nsince it will tell use whether we can use the program &mdash;\nand if we can, we immediately get some usage information.\n:::\n\nNext, let's check whether _FastQC_ is available at OSC,\nand if so, in which versions:\n\n```bash\nmodule avail fastqc\n```\n```{.bash-out}\nfastqc/0.11.8\n```\n\nThere is only one version available (`0.11.8`),\nwhich means that `module load fastqc` and `module load fastqc/0.11.8` would \neach load that same version.\n\n:::{.callout-caution collapse=\"true\"}\n## What might still be a reason to specify the version when we load FastQC?\n\nWhen we use the `module load` command inside a script:\n\n- This would ensure that when we run the same script a year later,\n  the same version would be used (assuming it hasn't been removed) &mdash;\n  otherwise, it's possible a newer version would has been installed in the\n  meantime, which might produce different results.\n\n- It will make it easy to see which version we used,\n  which is something we typically report in papers. \n:::\n\nLet's load the _FastQC_ module:\n\n```bash\nmodule load fastqc/0.11.8\n```\n\nNow, we can retry our `--help` attempt: \n\n```bash\nfastqc --help\n```\n``` {.bash-out}\n            FastQC - A high throughput sequence QC analysis tool\n\nSYNOPSIS\n\n        fastqc seqfile1 seqfile2 .. seqfileN\n\n    fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam] \n           [-c contaminant file] seqfile1 .. seqfileN  \n# [...truncated...]\n```\n\n::: {.exercise}\n#### On your own: load `miniconda3`\n\n- Load the default version of `miniconda3`, and then check which version was loaded.\n\n:::{.callout-tip collapse=\"true\"}\n##### Solution (Click here)\n\n```bash\nmodule load miniconda3\n\nmodule list\n```\n```{.bash-out}\nCurrently Loaded Modules:\n  1) xalt/latest   2) gcc-compatibility/8.4.0   3) intel/19.0.5   4) mvapich2/2.3.3   5) modules/sp2020   6) miniconda3/4.10.3-py37\n```\n\nThe version `4.10.3-py37` was loaded.\n:::\n\n- Now load the _latest_ version of `miniconda3` without unloading the earlier version\n  first. What output do you get?\n\n:::{.callout-tip collapse=\"true\"}\n##### Solution (Click to expand)\n\nLmod detected that you tried to load a different version of a software that was\nalready loaded, so it _changes_ the version and tells you about it:\n\n```bash\nmodule load miniconda3/23.3.1-py310\n```\n```{.bash-out}\nThe following have been reloaded with a version change:\n  1) miniconda3/4.10.3-py37 => miniconda3/23.3.1-py310\n```\n:::\n:::\n\n<br>\n\n## When software isn't installed at OSC\n\nIt's not too uncommon that software you need for your project\nis not installed at OSC,\nor that you need a more recent version of the software than is available.\nIn that case, the following two are generally your best options:\n\n- **_Conda_**, which creates software environments that you can activate\n  much like the _Lmod_ modules.\n\n- **Containers**, which are self-contained software environments that include\n  operating systems, akin to mini virtual machines.\n  While _Docker_ containers are most well-known,\n  OSC uses **_Apptainer_** (formerly known as _Singularity_) containers.\n  \n::: {.callout-note}\n#### Other options to install software / get it installed\n\n- Send an **email to [OSC Help](mailto:oschelp@osc.edu)**.\n  They might be able to help you with your installation,\n  or in case of commonly used software, might be willing to perform a\n  system-wide installation (that is, making it available through _Lmod_).\n\n- **\"Manually\" install the software**, which in the best case involves\n  downloading a directly functioning binary (executable),\n  but more commonly requires you to \"compile\" (build) the program.\n  This is sometimes straightforward but can also become extremely tricky,\n  especially at OSC where you don't have \"administrator privileges\"[^1]\n  and will often have difficulties with \"dependencies\"[^2].\n:::\n\n_Conda_ and containers are useful not only at OSC,\nwhere they bypass issues with dependencies and administrator privileges,\nbut more generally, for **reproducible and portable software environments**.\nThey also allow you to easily maintain distinct \"environments\",\neach with a different version of the same software,\nor with mutually incompatible software.\n\nBelow, you'll learn how you can use Conda and/or containers to use bioinformatics\nprograms that aren't installed system-wide at OSC.\n\n[^1]: When your personal computer asks you to \"authenticate\" while you are\n      installing something, you are authenticating yourself as a user with\n      administrator privileges.\n      At OSC, you don't have such privileges.\n\n[^2]: Other software upon which the software that you are trying to install\n      depends.\n\n<br>\n\n## Intro to *Conda* & using MCIC's _Conda_ environments\n\nThe _Conda_ software can create so-called **environments**\nin which one can install one or more software packages.\n\nAs we'll see below, as long as a program is available in one of the online\n_Conda_ repositories, installing it is quite straightforward,\ndoesn't require admin privileges,\nand the process is basically identical regardless of the program.\n\nHowever, at OSC, you might not even have to install anything yourself,\nsince I maintain an \"MCIC collection\" of _Conda_ environments that anyone can use.\nA _Conda_ environment is just a directory, and since all the environments in this\ncollection are in the same place at OSC, you can list them as follows:\n\n```bash\nls /fs/ess/PAS0471/jelmer/conda\n```\n```{.bash-out}\nabricate-1.0.1  bedops-2.4.39  checkm-1.2.0   entrez-direct    htseq-2.0.2          longstitch-1.0.3  nanopolish-0.13.2    prokka            repeatmasker-4.1.2.p1         samtools                star\nagat-0.9.1      bedtools       clinker        evigene          inspector-1.2.0      mafft             ncbi-datasets        pseudofinder      repeatmodeler-2.0.3           scoary                  subread-2.0.1\nalv             bioawk         clonalframeml  fastp            interproscan-5.55    maskrc-svg        nextdenovo-env       purge_dups-1.2.6  resfinder                     seqkit                  tgsgapcloser\namrfinderplus   biopython      codan-1.2      fastqc           iqtree               medaka-1.7.2      nextflow             pycoqc-2.5.2      resistomeanalyzer-2018.09.06  seqtk                   tracy-0.7.1\nantismash       bit            cogclassifier  fastq-dl         justorthologs-0.0.2  metaxa-2.2.3      orna-2.0             qiime2-2022.8     rgi-5.2.1                     signalp-6.0             transabyss-2.0.1\nariba-2.14.6    blast          cutadapt       fasttree-2.1.11  kallisto-0.48.0      minibusco         orthofinder          qualimap-env      r-metabar                     sistr-1.1.1             transdecoder-5.5.0\nastral-5.7.8    bowtie2-2.5.0  deeploc        filtlong-env     kat-2.4.2            minimap2-2.24     orthofisher          quast-5.0.2       rnaquast-2.2.1                smartdenovo-env         treetime\naswcli          bracken-2.6.1  deeptmhmm      flye-2.9.1       knsp-3.1             mlst              panaroo              quickmerge-env    roary-3.13                    snippy-4.6.0            trimgalore\nbactopia        braker2-env    deeptmhmm2     fmlrc2-0.1.7     kofamscan            mlst_check        phylofisher          racon-1.5.0       r-rnaseq                      snp-sites-2.5.1         trimmomatic-0.39\nbactopia-dev    busco          diamond        gcta             kraken2-2.1.2        mobsuite          pilon-1.24           ragtag-2.1.0      rsem-1.3.3                    soapdenovo-trans-1.0.4  trinity-2.13.2\nbakta           bwa-0.7.17     dwgsim         gffread-0.12.7   krakentools-1.2      multiqc           pkgs                 rascaf            rseqc-env                     sortmerna-env           unicycler\nbase            bwa-mem-2.2.1  eggnogmapper   gubbins          krona                mummer4           plasmidfinder-2.1.6  rcorrector-1.0.5  r_tree                        sourmash                virulencefinder\nbbmap           cactus         emboss         hisat2           liftoff-1.6.3        nanolyse-1.2.1    plink2               r-deseq           sabre-1.0                     spades-3.15.5           wtdbg-2.5\nbcftools        cgmlst         entap-0.10.8   hmmer            links-2.0.1          nanoplot          porechop             recognizer-1.8.3  salmon                        sra-tools\n```\n\nThis is organized similarly to the _Lmod_ modules in that there's generally\n**one separate environment for one program** (and all its dependencies),\nand the environment is named after that program.\n\nThe naming of the environments is unfortunately not entirely consistent:\nmany environments include the version number of the program,\nbut many others do not.\n(Generally speaking, for environments without version numbers,\nyou should expect the version of the program to be very recent,\nas I try to keep these up-to-date[^3]).\n\n[^3]: It isn't feasible to keep separate environments around for many different\n      versions of a program, mostly because _Conda_ environments contain a very\n      large number of files, and OSC has file number quotas.\n      This is why I have in many cases chosen the strategy of just updating\n      the version within the same environment.\n\nThis collection includes _Conda_ environments for several programs we need during\nRNAseq analysis that are not installed at OSC, such as _MultiQC_,\n_TrimGalore_, and _SortMeRNA_.\n\n<br>\n\n### Activating _Conda_ environments\n\n_Conda_ itself is already installed at OSC as _Miniconda_,\nbut we always need to load its module before we can use it:\n      \n```bash\nmodule load miniconda3\n```\n\nAs mentioned above, these environments are activated and deactivated\nin a similar manner as with the _Lmod_ system.\n(But whereas we use the term \"load\" for _Lmod_ modules,\nwe use **\"activate\"** for _Conda_ environments &mdash; it means the same thing.)\n\nAlso like _Lmod_, there is a main command (`conda`) and several subcommands\n(`deactivate`, `create`, `install`, `update`) for different functionality.\nHowever, for historical reasons,\nthe most foolproof way to activate a _Conda_ environment is to use **`source activate`**\nrather than the expected `conda activate` &mdash; for instance:\n\n```bash\nsource activate /fs/ess/PAS0471/jelmer/conda/multiqc\n```\n```{.bash-out}\n(multiqc) [jelmer@p0085 rnaseq-intro]$\n```\n\n:::{.callout-tip}\n##### _Conda_ environment indicator\nWhen we have an active _Conda_ environment,\nits name is conveniently displayed in our prompt, as depicted above.\n:::\n\nAfter we have activated the `multiqc` environment, \nwe should be able to actually use the program.\nTo test this, we'll again simply run it with a `--help` option:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmultiqc --help\n```\n:::\n\n\n``` {.bash-out}                                                                                                                                                                                                                               \n /// MultiQC 🔍 | v1.15                                                                                                                                                                                                            \n                                                                                                                                                                                                                                   \n Usage: multiqc [OPTIONS] [ANALYSIS DIRECTORY]                                                                                                                                                                                     \n                                                                                                                                                                                                                                   \n MultiQC aggregates results from bioinformatics analyses across many samples into a single report.                                                                                                                                 \n It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.                                                       \n To run, supply with one or more directory to scan for analysis results. For example, to run in the current working directory, use 'multiqc .'                                                                                     \n                                                                                                                                                                                                                                   \n╭─ Main options ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ --force            -f  Overwrite any existing reports                                                                                                                                                                           │\n│ --config           -c  Specific config file to load, after those in MultiQC dir / home dir / working dir. (PATH)                                                                                                                │\n│ --cl-config            Specify MultiQC config YAML on the command line (TEXT)                                                                                                                                                   │\n│ --filename         -n  Report filename. Use 'stdout' to print to standard out. (TEXT)                                                                                                                                           │\n│ --outdir           -o  Create report in the specified output directory. (TEXT)                                                                                                                                                  │\n│ --ignore           -x  Ignore analysis files (GLOB EXPRESSION)                                                                                                                                                                  │\n│ --ignore-samples       Ignore sample names (GLOB EXPRESSION)                                                                                                                                                                    │\n│ --ignore-symlinks      Ignore symlinked directories and files                                                                                                                                                                   │\n│ --file-list        -l  Supply a file containing a list of file paths to be searched, one per row                                                                                                                                │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n[...truncated...]\n```\n\n<br>\n\n### Lines to add to your shell script\n\nAs mentioned above for _Lmod_ modules,\nyou need to load them in every shell session you want to use them &mdash;\nand the same is true for _Conda_ environments.\nTherefore, you should also always\n_include the necessary code to load/activate programs in your shell scripts._\n\n**When your program is in an _Lmod_ module**,\nthis only involves a `module load` call &mdash; e.g., for _FastQC_:\n\n```bash\n#!/bin/bash\nset -euo pipefail\n\n# Load software\nmodule load fastqc\n```\n\n**When your program is in a _Conda_ environment**,\nthis entails a `module load` command to load _Conda_ itself,\nfollowed by a `source activate` command to load the relevant _Conda_ environment:\n\n```bash\n#!/bin/bash\n\n# Load software\nmodule load miniconda3\nsource activate /fs/ess/PAS0471/jelmer/conda/multiqc\n\n# Strict/safe Bash settings \nset -euo pipefail\n```\n\n:::{.callout-warning}\nI've moved the `set -euo pipefail` line _below_ the `source activate` command,\nbecause the _Conda_ activation procedure can otherwise result in \"unbound variable\"\nerrors.\n:::\n\n::: {.callout-note}\n#### A few other useful _Conda_ commands\n\n- Deactivate the currently active _Conda_ environment:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda deactivate   \n  ```\n  :::\n\n\n- Activate one environment and then \"stack\" an _additional_ environment\n  (a regular `source activate` command would _switch_ environments):\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  # Load one environment the regular way:\n  source activate /fs/ess/PAS0471/jelmer/conda/multiqc\n  # This will _also_ activate the TrimGalore environment (yes, use 'conda'!):\n  conda activate --stack /fs/ess/PAS0471/jelmer/conda/trimgalore\n  ```\n  :::\n\n\n- List all packages (programs) installed in an environment &mdash;\n  due to dependencies, this can be a long list,\n  even if you only actively installed one program:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda list -n /fs/ess/PAS0471/jelmer/conda/multiqc\n  ```\n  :::\n\n\n:::\n\n<br>\n\n## Using _Apptainer_ containers\n\n::: {.callout-caution}\n#### TODO\n:::\n\n- Docker vs. Singularity & Apptainer\n- Downloading a container\n- Running a program inside a container\n- Building your own containers outside of the scope of this intro\n\n<br>\n\n## At-home reading: Creating your own _Conda_ environments\n\nWhen you want to create your own _Conda_ environments and install programs,\nmake sure to load the most recent `miniconda3` module,\nwhich is currently not the default one.\nThis is because installation has become much quicker and less likely to fail than\nin earlier versions\n(just for _loading_ environments, like we did above, the version doesn't matter).\n\nAs of August 2023, the most recent version is `23.3.1-py310`\n(and recall that you can check all available versions with `module spider`):\n\n```bash\nmodule load miniconda3/23.3.1-py310\n```\n\n### One-time _Conda_ configuration\n\nWe first have to do some _one-time_ configuration[^4],\nwhich will set the **_Conda_ \"channels\"** (basically, software repositories)\nthat we want to use when we install programs.\nThis config also includes setting relative _priorities_ among channels,\nsince one program may be available from multiple channels.\n\n[^4]: That is, these settings will be saved somewhere in your OSC home directory,\n      and you never have to set them again unless you need to make changes.\n\nWe can do this with the `config` subcommand:\n\n```bash\nconda config --add channels defaults     # Added first => lowest priority\nconda config --add channels bioconda\nconda config --add channels conda-forge  # Added last => highest priority\n```\n\nLet's check whether the configuration was successfully saved:\n\n```bash\nconda config --get channels\n```\n``` {.bash-out}\n--add channels 'defaults'   # lowest priority\n--add channels 'bioconda'\n--add channels 'conda-forge'   # highest priority\n```\n\n<br>\n\n### Example: Creating an environment for _Trim Galore!_\n\nTo practice using _Conda_,\nwe will now create a Conda environment with the program _Trim Galore!_ installed.\n\n_Trim Galore!_ is a commonly used program to do quality trimming and adapter trimming\nfor `FASTQ` files &mdash;\nwe'll learn more about it in a later session, as we will use it on our RNAseq data.\n\nHere is the command to all at once create a new _Conda_ environment\nand install _Trim Galore!_ into that environment:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# (Don't run this)\nconda create -y -n trim-galore -c bioconda trim-galore\n```\n:::\n\n\nLet's break the above command down:\n\n- **`create`** is the _Conda_ subcommand to create a new environment.\n\n- **`-y`** is a flag that prevents us from being asked to confirm installation.\n\n- Following the **`-n`** option, we can specify the name of the environment,\n  so **`-n trim-galore`** means that we want our environment to be called\n  `trim-galore`.\n  We can use whatever name we like for the environment,\n  but of course a descriptive yet concise name is a good idea.\n  Since we are making a single-program environment,\n  it makes sense to simply name it after the program.\n  \n- Following the **`-c`** option,\n  we can specify a channel from which we want to install,\n  so **`-c bioconda`** indicates we want to use the `bioconda` channel.\n  (Given that we've done some config above, this is not always necessary,\n  but it can be good to be explicit.)\n  \n- The **`trim-galore`** at the end of the line\n  simply tells _Conda_ to install the package of that name.\n  This is a \"_positional_\" argument to the command\n  (note that there's no option like `-s` before it):\n  we put any software package(s) we want to install at the end of the command.\n\n#### Specifying a version {-}\n\nIf we want to be explicit about the version we want to install,\nwe can add the version after `=` following the package name,\nand may also want to include that version number in the _Conda_\nenvironment's name &mdash;\ntry running the command below:\n\n```bash\nconda create -y -n trim-galore-0.6.10 -c bioconda trim-galore=0.6.10\n```\n```{.bash-out}\nCollecting package metadata (current_repodata.json): done  \nSolving environment: done\n# [...truncated...]\n```\n\n:::{.callout-tip collapse=\"true\"}\n## See the full output when I ran this command (Click to expand)\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==> WARNING: A newer version of conda exists. <==\n  current version: 23.3.1\n  latest version: 23.7.2\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\nOr to minimize the number of packages updated during conda update use\n\n     conda install conda=23.7.2\n\n\n\n## Package Plan ##\n\n  environment location: /fs/project/PAS0471/jelmer/conda/trimgalore-0.6.10\n\n  added / updated specs:\n    - trim-galore=0.6.10\n\n\nThe following packages will be downloaded:\n\n    | package            | build                                            |\n    | ------------------ | ------------------------------------------------ |\n    | bz2file-0.98       | py_0           9 KB  conda-forge                 |\n    | cutadapt-1.18      | py37h14c3975_1         206 KB  bioconda          |\n    | fastqc-0.12.1      | hdfd78af_0        11.1 MB  bioconda              |\n    | pigz-2.6           | h27826a3_0          87 KB  conda-forge           |\n    | python-3.7.12      | hf930737_100_cpython        57.3 MB  conda-forge |\n    | trim-galore-0.6.10 | hdfd78af_0          45 KB  bioconda              |\n    | xopen-0.7.3        | py_0          11 KB  bioconda                    |\n    ------------------------------------------------------------\n                                           Total:        68.8 MB\n\nThe following NEW packages will be INSTALLED:\n\n  _libgcc_mutex      conda-forge/linux-64::_libgcc_mutex-0.1-conda_forge \n  _openmp_mutex      conda-forge/linux-64::_openmp_mutex-4.5-2_gnu \n  alsa-lib           conda-forge/linux-64::alsa-lib-1.2.9-hd590300_0 \n  bz2file            conda-forge/noarch::bz2file-0.98-py_0 \n  bzip2              conda-forge/linux-64::bzip2-1.0.8-h7f98852_4 \n  ca-certificates    conda-forge/linux-64::ca-certificates-2023.7.22-hbcca054_0 \n  cairo              conda-forge/linux-64::cairo-1.16.0-hbbf8b49_1016 \n  cutadapt           bioconda/linux-64::cutadapt-1.18-py37h14c3975_1 \n  expat              conda-forge/linux-64::expat-2.5.0-hcb278e6_1 \n  fastqc             bioconda/noarch::fastqc-0.12.1-hdfd78af_0 \n  font-ttf-dejavu-s~ conda-forge/noarch::font-ttf-dejavu-sans-mono-2.37-hab24e00_0 \n  font-ttf-inconsol~ conda-forge/noarch::font-ttf-inconsolata-3.000-h77eed37_0 \n  font-ttf-source-c~ conda-forge/noarch::font-ttf-source-code-pro-2.038-h77eed37_0 \n  font-ttf-ubuntu    conda-forge/noarch::font-ttf-ubuntu-0.83-hab24e00_0 \n  fontconfig         conda-forge/linux-64::fontconfig-2.14.2-h14ed4e7_0 \n  fonts-conda-ecosy~ conda-forge/noarch::fonts-conda-ecosystem-1-0 \n  fonts-conda-forge  conda-forge/noarch::fonts-conda-forge-1-0 \n  freetype           conda-forge/linux-64::freetype-2.12.1-hca18f0e_1 \n  gettext            conda-forge/linux-64::gettext-0.21.1-h27087fc_0 \n  giflib             conda-forge/linux-64::giflib-5.2.1-h0b41bf4_3 \n  graphite2          conda-forge/linux-64::graphite2-1.3.13-h58526e2_1001 \n  harfbuzz           conda-forge/linux-64::harfbuzz-7.3.0-hdb3a94d_0 \n  icu                conda-forge/linux-64::icu-72.1-hcb278e6_0 \n  keyutils           conda-forge/linux-64::keyutils-1.6.1-h166bdaf_0 \n  krb5               conda-forge/linux-64::krb5-1.21.2-h659d440_0 \n  lcms2              conda-forge/linux-64::lcms2-2.15-haa2dc70_1 \n  ld_impl_linux-64   conda-forge/linux-64::ld_impl_linux-64-2.40-h41732ed_0 \n  lerc               conda-forge/linux-64::lerc-4.0.0-h27087fc_0 \n  libcups            conda-forge/linux-64::libcups-2.3.3-h4637d8d_4 \n  libdeflate         conda-forge/linux-64::libdeflate-1.18-h0b41bf4_0 \n  libedit            conda-forge/linux-64::libedit-3.1.20191231-he28a2e2_2 \n  libexpat           conda-forge/linux-64::libexpat-2.5.0-hcb278e6_1 \n  libffi             conda-forge/linux-64::libffi-3.4.2-h7f98852_5 \n  libgcc-ng          conda-forge/linux-64::libgcc-ng-13.1.0-he5830b7_0 \n  libglib            conda-forge/linux-64::libglib-2.76.4-hebfc3b9_0 \n  libgomp            conda-forge/linux-64::libgomp-13.1.0-he5830b7_0 \n  libiconv           conda-forge/linux-64::libiconv-1.17-h166bdaf_0 \n  libjpeg-turbo      conda-forge/linux-64::libjpeg-turbo-2.1.5.1-h0b41bf4_0 \n  libnsl             conda-forge/linux-64::libnsl-2.0.0-h7f98852_0 \n  libpng             conda-forge/linux-64::libpng-1.6.39-h753d276_0 \n  libsqlite          conda-forge/linux-64::libsqlite-3.42.0-h2797004_0 \n  libstdcxx-ng       conda-forge/linux-64::libstdcxx-ng-13.1.0-hfd8a6a1_0 \n  libtiff            conda-forge/linux-64::libtiff-4.5.1-h8b53f26_0 \n  libuuid            conda-forge/linux-64::libuuid-2.38.1-h0b41bf4_0 \n  libwebp-base       conda-forge/linux-64::libwebp-base-1.3.1-hd590300_0 \n  libxcb             conda-forge/linux-64::libxcb-1.15-h0b41bf4_0 \n  libzlib            conda-forge/linux-64::libzlib-1.2.13-hd590300_5 \n  ncurses            conda-forge/linux-64::ncurses-6.4-hcb278e6_0 \n  openjdk            conda-forge/linux-64::openjdk-20.0.0-h8e330f5_0 \n  openssl            conda-forge/linux-64::openssl-3.1.2-hd590300_0 \n  pcre2              conda-forge/linux-64::pcre2-10.40-hc3806b6_0 \n  perl               conda-forge/linux-64::perl-5.32.1-4_hd590300_perl5 \n  pigz               conda-forge/linux-64::pigz-2.6-h27826a3_0 \n  pip                conda-forge/noarch::pip-23.2.1-pyhd8ed1ab_0 \n  pixman             conda-forge/linux-64::pixman-0.40.0-h36c2ea0_0 \n  pthread-stubs      conda-forge/linux-64::pthread-stubs-0.4-h36c2ea0_1001 \n  python             conda-forge/linux-64::python-3.7.12-hf930737_100_cpython \n  readline           conda-forge/linux-64::readline-8.2-h8228510_1 \n  setuptools         conda-forge/noarch::setuptools-68.0.0-pyhd8ed1ab_0 \n  sqlite             conda-forge/linux-64::sqlite-3.42.0-h2c6b66d_0 \n  tk                 conda-forge/linux-64::tk-8.6.12-h27826a3_0 \n  trim-galore        bioconda/noarch::trim-galore-0.6.10-hdfd78af_0 \n  wheel              conda-forge/noarch::wheel-0.41.1-pyhd8ed1ab_0 \n  xopen              bioconda/noarch::xopen-0.7.3-py_0 \n  xorg-fixesproto    conda-forge/linux-64::xorg-fixesproto-5.0-h7f98852_1002 \n  xorg-inputproto    conda-forge/linux-64::xorg-inputproto-2.3.2-h7f98852_1002 \n  xorg-kbproto       conda-forge/linux-64::xorg-kbproto-1.0.7-h7f98852_1002 \n  xorg-libice        conda-forge/linux-64::xorg-libice-1.1.1-hd590300_0 \n  xorg-libsm         conda-forge/linux-64::xorg-libsm-1.2.4-h7391055_0 \n  xorg-libx11        conda-forge/linux-64::xorg-libx11-1.8.6-h8ee46fc_0 \n  xorg-libxau        conda-forge/linux-64::xorg-libxau-1.0.11-hd590300_0 \n  xorg-libxdmcp      conda-forge/linux-64::xorg-libxdmcp-1.1.3-h7f98852_0 \n  xorg-libxext       conda-forge/linux-64::xorg-libxext-1.3.4-h0b41bf4_2 \n  xorg-libxfixes     conda-forge/linux-64::xorg-libxfixes-5.0.3-h7f98852_1004 \n  xorg-libxi         conda-forge/linux-64::xorg-libxi-1.7.10-h7f98852_0 \n  xorg-libxrender    conda-forge/linux-64::xorg-libxrender-0.9.11-hd590300_0 \n  xorg-libxt         conda-forge/linux-64::xorg-libxt-1.3.0-hd590300_1 \n  xorg-libxtst       conda-forge/linux-64::xorg-libxtst-1.2.3-h7f98852_1002 \n  xorg-recordproto   conda-forge/linux-64::xorg-recordproto-1.14.2-h7f98852_1002 \n  xorg-renderproto   conda-forge/linux-64::xorg-renderproto-0.11.1-h7f98852_1002 \n  xorg-xextproto     conda-forge/linux-64::xorg-xextproto-7.3.0-h0b41bf4_1003 \n  xorg-xproto        conda-forge/linux-64::xorg-xproto-7.0.31-h7f98852_1007 \n  xz                 conda-forge/linux-64::xz-5.2.6-h166bdaf_0 \n  zlib               conda-forge/linux-64::zlib-1.2.13-hd590300_5 \n  zstd               conda-forge/linux-64::zstd-1.5.2-hfc55251_7 \n\n\n\nDownloading and Extracting Packages\n                                                                                                                                                                                                                                   \nPreparing transaction: done                                                                                                                                                                                                        \nVerifying transaction: done                                                                                                                                                                                                        \nExecuting transaction: done                                                                                                                                                                                                        \n#                                                                                                                                                                                                                                  \n# To activate this environment, use                                                                                                                                                                                                \n#                                                                                                                                                                                                                                  \n#     $ conda activate trimgalore-0.6.10\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n```\n:::\n:::\n\n\n:::\n\nNow, you should be able to activate the enviroment\n(using just it's name -- see the box below):\n\n```bash\nsource activate trim-galore\n\ntrim_galore --help\n```\n```{.bash-out}\n USAGE:\n\ntrim_galore [options] <filename(s)>\n\n-h/--help               Print this help message and exits.\n# [...truncated...]\n```\n\n:::{.callout-note}\n#### Specifying the full path to the environment dir\n\nYou may have noticed above that we merely gave the enviroment a _name_\n(`trim-galore` or `trim-galore-0.6.10`),\nand did not tell it _where_ to put this environment.\nSimilarly, we were able to activate the environment with just its name.\nConda assigns a **personal default directory for its environments**,\nsomewhere in your Home directory.\n\nYou can install environments in a different location\nwith the `-p` (instead of `-n`) option, for example:\n\n```bash\nmkdir -p /fs/scratch/PAS0471/$USER/conda\nconda create -y -p /fs/scratch/PAS0471/$USER/conda/trim-galore -c bioconda trim-galore\n```\n\nAnd when you want to load someone else's _Conda_ environments,\nyou'll always have to specify the full path to environment's dir,\nlike you did when loading a _Conda_ environment of mine above.\n:::\n\n<br>\n\n### Finding the _Conda_ installation info online\n\nMinor variations on the `conda create` command above can be used to install\nalmost any program for which a _Conda_ package is available,\nwhich is the vast majority of open-source bioinformatics programs!\n\nHowever, you may be wondering how we would know:\n\n- Whether the program is available and what its _Conda_ package's name is\n- Which _Conda_ channel we should use\n- Which versions are available\n\nMy strategy to finding these things out is to simply Google the program name\ntogether with \"conda\", e.g. \"cutadapt conda\" if I wanted to install the \n_CutAdapt_ program. Let's see that in action:\n\n<p align=\"center\"><img src=img/conda_google.png width=\"85%\"></p>\n\n<br>\n\nWe click on that first link (it should always be the first Google hit):\n\n<p align=\"center\"><img src=img/conda_website.png width=\"85%\"></p>\n\n<br>\n\n#### Build the installation command {-}\n\nI always take the top of the two example installation commands as a template,\nwhich is here: `conda install -c bioconda cutadapt`.\n\nYou may notice the `install` subcommand, which we haven't yet seen.\nThis would install Cutadapt into _the currently activated Conda environment_.\nSince our strategy here --and my general strategy-- is to create a new\nenvironment each time you're installing a program,\njust installing in whatever environment is currently active is not a great idea.\nYou could first create an \"empty\" environment, and _then_ run the install command,\nbut we saw above that we can do all of this in a single command.\n\nTo build this create-plus-install command, all we need to do is replace `install`\nin the example command on the _Conda_ website by `create -y -n <env-name>`.\nThen, our full command (without version specification) again will be:\n\n```bash\nconda create -y -n cutadapt -c bioconda cutadapt\n```\n\nTo see which **version** will be installed by default,\nand to see which older versions are available:\n\n<p align=\"center\">\n<img src=img/conda_website_version.png width=\"70%\">\n</p>\n\nFor almost any other program, you can use the exact same procedure to find\nthe _Conda_ package and install it!\n\n::: {.callout-note}\n#### A few more _Conda_ commands to manage your environments\n\n- Remove an environment entirely:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda env remove -n cutadapt\n  ```\n  :::\n\n\n- List all your conda environments:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda env list\n  ```\n  :::\n\n\n:::\n\n:::{.callout-note}\n## Use one environment per program (as here) or one per research project\n\nBelow are two reasonable ways to organize your _Conda_ environments,\nand their advantages:\n\n- **Have one environment per program** (my preference)\n  - Easier to keep an overview of what you have installed\n  - No need to reinstall the same program across different projects\n  - Less risk of running into problems with your environment due to mutually\n    incompatible software and complicated dependency situations\n\n- _Have one environment per research project_\n  - You just need to activate that one environment when you're working on\n    your project.\n  - Easier when you need to share your entire project with someone else\n    (or yourself) on a different (super)computer.\n\nEven though it might seem easier,\nit's _not_ recommended to simply install all programs across all projects in\none single environment.\nThis doesn't benefit reproducibility and your environment is likely to\nsooner or later stop functioning properly.\n\nA side note is that even when you want to install a single program,\nmultiple programs _are_ in fact nearly always installed:\nthe programs that your target program depends on (\"dependencies\").\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}