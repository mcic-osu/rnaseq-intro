{
  "hash": "a1fdd1b3ebcd5e7a21a97bc0914ed57b",
  "result": {
    "markdown": "---\ntitle: \"Using Software at OSC\"\nsubtitle: \"Loading existing modules and installing and using software with conda\" \npagetitle: \"Software at OSC\"\nhighlight-style: github\nnumber-sections: true\nauthor: Jelmer Poelstra\n---\n\n::: {.cell}\n\n:::\n\n\n-----\n\nSo far, we have only used commands that are available in any Unix shell. \nBut to actually analyze genomics data sets, we also need to use specialized\nbioinformatics software.\n\nMost software that is already installed at OSC must nevertheless be \"loaded\"\n(\"activated\") before we can use it &mdash;\nand if our software of choice is not installed, we have to do so ourselves.\nWe will cover those topics in this module.\n\n## Setup\n\n:::{.callout-note collapse=\"true\"}\n## Starting a VS Code session with an active terminal (click here)\n\n1. Log in to OSC at <https://ondemand.osc.edu>.\n2. In the blue top bar, select `Interactive Apps` and then `Code Server`.\n3. In the form that appears:\n   - Enter `4` or more in the box `Number of hours`\n   - **To avoid having to switch folders within VS Code**,\n     enter `/fs/ess/scratch/PAS2250/participants/<your-folder>` in the box `Working Directory`\n     (replace `<your-folder>` by the actual name of your folder).\n   - Click `Launch`.\n4. On the next page,\n   once the top bar of the box is green and says `Runnning`,\n   click `Connect to VS Code`.\n5. Open a terminal: {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.\n6. In the terminal, type `bash` and press <kbd>Enter</kbd>.\n7. Type `pwd` in the termain to check you are in `/fs/ess/scratch/PAS2250`.\n   \n   If not, click\n   {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`\n   and enter `/fs/ess/scratch/PAS2250/<your-folder>`.\n\n:::\n\n<br>\n\n## Running command-line programs\n\nAs pointed out in the introduction to the workshop,\nbioinformatics software (programs) that we use to analyze genomic data are\ntypically run from the command line.\nThat is, they have \"command-line interfaces\" (*CLI*s) rather than\n\"graphical user interfaces\" (*GUI*s),\nand are run using commands that are structurally very similar to how we've\nbeen using basic Unix commands.\n\nFor instance, we can run the program `FastQC` as follows,\ninstructing it to process the `FASTQ` file `sampleA.fastq.gz`\nwith default options:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfastqc sampleA.fastq.gz       # Don't run\n```\n:::\n\n\nSo, with all the scaffolding we have learned in the previous modules,\nwe only need to make small modifications to have our scripts run\ncommand-line programs.\nBut, we first need to load and/or install these programs.\n\n:::{.callout-note}\n## Running inside a script or interactively\n\nLike any other command, we could in principle run the line of code above\neither in our interactive shell or from inside a script.\nIn practice, it is **better to do this in a script**,\nespecially at OSC, because:\n\n(1) Such programs typically take a while to run\n(2) We are not supposed to run processes that use significant resources\n    on login nodes\n(3) We can run the same script simultaneously for different input files.\n\n:::\n\n<br>\n\n## Software at OSC with `Lmod`\n\nOSC administrators manage software with the `Lmod` system of software modules.\nFor us users, this means that even though a lot of software is installed,\n**most of it can only be used after we explicitly load it.**  \n(That may seem like a drag, but on the upside,\nthis practice enables the use of different versions of the same software,\nand of mutually incompatible software on a single system.)\n\n### Checking for available software\n\nThe OSC website has a\n[list of software that has been installed at OSC](<https://www.osc.edu/resources/available_software/software_list>).\nYou can also search for available software in the shell\nusing two subtly different commands:\n  \n  - `module spider` lists modules that are installed.\n  - `module avail` lists modules that *can be directly loaded*,\n    given the current environment\n    (i.e., depending on which other software has been loaded).\n\nSimply running `module spider` or `module avail` would spit out complete lists\n&mdash; more usefully, we can add **search terms** as arguments\nto these commands:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule spider python\n```\n:::\n\n\n:::{.bash-out}\n\n-------------------------------------------------------------------------------\npython:\n-------------------------------------------------------------------------------\n     Versions:\n        python/2.7-conda5.2\n        python/3.6-conda5.2\n        python/3.7-2019.10\n\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule avail python\n```\n:::\n\n\n:::{.bash-out}\n\npython/2.7-conda5.2 &nbsp; &nbsp; &nbsp; &nbsp; python/3.6-conda5.2 (D) &nbsp; &nbsp; &nbsp; &nbsp; python/3.7-2019.10\n\n:::\n\n:::{.callout-tip}\n## `(D)` = default version\nThe `(D)` in the output above marks the default version of the program;\nthat is, the version of the program that would be loaded if we don't specify\na version (see examples below).\n\n:::\n\n<br>\n\n### Loading software\n\nAll other `Lmod` software functionality is also accessed using `module`\n\"subcommands\" (we call `module` the command and e.g. `spider` the subcommand).\nFor instance, to load a module:\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\n# Load a module:\nmodule load python              # Load the default version\nmodule load python/3.7-2019.10  # Load a specific version (copy from module spider output)\n```\n:::\n\n\nTo check which modules have been loaded\n(the list includes automatically loaded modules):\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule list\n```\n:::\n\n\n:::{.bash-out}\nCurrently Loaded Modules:  \n&nbsp; &nbsp; 1) xalt/latest &nbsp; &nbsp; &nbsp; 2) gcc-compatibility/8.4.0 &nbsp; &nbsp; &nbsp; 3) intel/19.0.5 &nbsp; &nbsp; &nbsp; 4) mvapich2/2.3.3 &nbsp; &nbsp; &nbsp; 5) modules/sp2020\n:::\n\n:::{.callout-note}\n## Unloading modules\n\nOccasionally useful when running into conflicting (mutually incompatible)\nmodules:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule unload python        # Unload a module\nmodule purge                # Unload all modules\n```\n:::\n\n:::\n\n<br>\n\n### A practical example\n\nLet's load a _very_ commonly used bioinformatics program that we will also\nuse in examples later on: FastQC.\nFastQC performs quality control (hence: \"QC\") on FASTQ files.\n\nFirst, let's test that we indeed _cannot_ currently use `fastqc`\nby running `fastqc` with the `--help` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfastqc --help\n```\n:::\n\n\n:::{.bash-out}\nbash: fastqc: command not found\n:::\n\n:::{.callout-tip}\n## Help!\nA solid majority of command-line programs can be run with with a `--help`\n(and/or `-h`) flag, and this is often a good thing to try first,\nsince it will tell use whether we can use the program, and if we can,\nwe immediately get some usage information.\n:::\n\nNext, let's check whether FastQC is available at OSC,\nand if so, in which versions:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule avail fastqc\n```\n:::\n\n\n:::{.bash-out}\nfastqc/0.11.8\n:::\n\nThere is only one version available (`0.11.8`),\nwhich means that `module load fastqc` and `module load fastqc/0.11.8` would \neach load that same version.\n\n:::{.callout-caution collapse=\"true\"}\n## What might still be a reason to specify the version when we load FastQC?\n\nWhen we use it inside a script:\n\n- This would ensure that when we run the same script a year later,\n  the same version would be used (assuming it hasn't been removed) &mdash;\n  otherwise, it's possible a newer version would has been installed in the\n  meantime, which might produce different results.\n\n- It will make it easy to see which version we used,\n  which is something we typically report in papers. \n:::\n\nLet's load the FastQC module:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule load fastqc/0.11.8\n```\n:::\n\n\nAfter we have loaded the module, we can retry our `--help` attempt: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfastqc --help | head     # I'm piping into head to avoid pages worth of output \n```\n:::\n\n\n:::{.bash-out}\n\n            FastQC - A high throughput sequence QC analysis tool\n\nSYNOPSIS\n\n        fastqc seqfile1 seqfile2 .. seqfileN\n\n    fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam] \n           [-c contaminant file] seqfile1 .. seqfileN  \n           \n:::\n\n<br>\n\n## When software isn't installed at OSC\n\nIt's not too uncommon that software you need for your project\nis not installed at OSC,\nor that you need a more recent version of the software than is available.\nThe main options available to you in such a case are to:\n\n- **\"Manually\" install the software**, which in the best case involves\n  downloading a directly functioning binary (executable),\n  but more commonly requires you to \"compile\" (build) the program.\n  This is sometimes straightforward but can also become extremely tricky,\n  especially at OSC where you don't have \"administrator privileges\"[^2]\n  at OSC and will often have difficulties with \"dependencies\"[^3].\n  \n- Send an **email to [OSC Help](mailto:oschelp@osc.edu)**.\n  They might be able to help you with your installation,\n  or in case of commonly used software, might be willing to perform a\n  system-wide installation (that is, making it available through `module`).\n  #TODO: Refer to the software form in https://www.osc.edu/resources/getting_started/supercomputing_faq#req\n\n- Use **`Apptainer` / `Singularity` \"containers\"**.\n  Containers are self-contained software environments that include operating\n  systems, akin to mini virtual machines.\n  \n- Use **`conda`**, which creates software environments\n  that are activated like in the `module` system.\n\nConda and containers are useful not only at OSC,\nwhere they **bypass issues with dependencies and administrator privileges**,\n**but more generally, for reproducible and portable software environments**.\nThey also allow you to easily maintain distinct \"environments\",\neach with a different version of the same software,\nor with mutually incompatible software.\n\nWe will teach conda here because it is easier to learn and use than containers,\nand because nearly all open-source bioinformatics software is available as a\nconda package.\n\n:::{.callout-note}\n## When to use containers instead of Conda\n\n- If you need to use software that requires a different Operating System (OS)\n  or OS version than the one at OSC.\n- If you want or require even greater reproducibility and portability\n  to create an isolated environment that can be exported and used anywhere.\n\n:::\n\n[^2]: When your personal computer asks you to \"authenticate\" while you are\n      installing something, you are authenticating yourself as a user with\n      administrator privileges.\n      At OSC (and for OSU-managed personal computers, too!),\n      you don't have such privileges.\n\n[^3]: Other software upon which the software that you are trying to install\n      depends.\n\n<br>\n\n## Using conda\n\nConda creates so-called **environments** in which you can install one or more\nsoftware packages.\nAs mentioned above, these environments are activated and deactivated\nin a similar manner as with the `Lmod` system --\nbut the key difference is that we can create and manage these environments\nourselves.\n\n:::{.callout-important collapse=\"true\"}\n## Use one environment per program (as here) or one per research project\n\nBelow are two reasonable ways to organize your conda environments,\nand their advantages:\n\n- Have one environment per program (my preference)\n  - Easier to keep an overview of what you have installed\n  - No need to reinstall the same program across different projects\n  - Less risk of running into problems with your environment due to mutually\n    incompatible software and complicated dependency situations\n\n- Have one environment per research project\n  - You just need to activate that one environment when you're working on\n    your project.\n  - Easier when you need to share your entire project with someone else\n    (or yourself) on a different (super)computer.\n\nIts **not** recommended to simply install all programs across all projects in\none environment.\nThis doesn't benefit reproducibility and your environment is likely to\nsooner or later stop functioning properly.\n\nA side note is that even when you want to install a single program,\nmultiple programs _are_ in fact nearly always installed:\nthe programs that your target program depends on (\"dependencies\").\n\n:::\n\n<br>\n\n### Loading the (mini)conda module\n\nWhile it is also fairly straightforward to install conda for yourself [^4],\nwe will use OSC's system-wide installation of conda in this workshop.\nTherefore, we first need to use a `module load` command to make it available:\n\n[^4]: And this is certainly worth considering if you find yourself using conda\n      a lot, because the conda version at OSC is quite out-of-date.\n      \n\n::: {.cell}\n\n```{.bash .cell-code}\n# (The most common installation of conda is actually called \"miniconda\")\nmodule load miniconda3\n```\n:::\n\n\n<br>\n\n### One-time conda configuration\n\nWe will also do some one-time configuration,\nwhich will set the **conda \"channels\"** (basically, software repositories)\nthat we want to use when we install software.\nThis config also includes setting relative _priorities_ among channels,\nsince one software package may be available from multiple channels.\n\nLike with `module` commands, conda commands consist of two parts,\nthe conda command itself and a subcommand, such as `config`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda config --add channels defaults     # Added first => lowest priority\nconda config --add channels bioconda\nconda config --add channels conda-forge  # Added last => highest priority\n```\n:::\n\n\nLet's check whether this configuration step worked:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda config --get channels\n```\n:::\n\n\n:::{.bash-out}\n--add channels 'defaults' &nbsp; &nbsp; &nbsp;   # lowest priority  \n--add channels 'bioconda'  \n--add channels 'conda-forge' &nbsp; &nbsp; &nbsp;   # highest priority\n:::\n\n<br>\n\n### Example: Creating an environment for `cutadapt`\n\nTo practice using conda,\nwe will now create a conda environment with the program `cutadapt` installed.\n\n`cutadapt` is a commonly used program to remove adapters or primers from\nsequence reads in `FASTQ` files &mdash;\nin particular, it is ubiquitous for primer removal in (e.g. 16S rRNA) microbiome\nmetabarcoding studies.\nBut there is no `Lmod` module on OSC for it, so if we want to use it,\nour best option is to resort to conda.\n\nHere is the command to create a new environment and install `cutadapt`\ninto that environment:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda create -y -n cutadapt -c bioconda cutadapt   # Don't run this\n```\n:::\n\n\nLet's break the above command down:\n\n- **`create`** is the conda subcommand to create a new environment.\n\n- **`-y`** is a flag that prevents us from being asked to confirm installation.\n\n- Following the **`-n`** option, we can specify the name of the environment,\n  so **`-n cutadapt`** means that we want our environment to be called\n  `cutadapt`.\n  We can use whatever name we like for the environment,\n  but of course a descriptive yet concise name is a good idea.\n  Since we are making a single-program environment,\n  it makes sense to simply name it after the program.\n  \n- Following the **`-c`** option,\n  we can specify a channel from which we want to install,\n  so **`-c bioconda`** indicates we want to use the `bioconda` channel.\n  (Given that we've done some config above, this is not always necessary,\n  but it can be good to be explicit.)\n  \n- The **`cutadapt`** at the end of the line\n  simply tells conda to install the package of that name.\n  This is a \"_positional_\" argument to the command\n  (note that there's no option like `-s` before it):\n  we put any software package(s) we want to install at the end of the command.\n\n#### Specifying a version {-}\n\nIf we want to be explicit about the version we want to install,\nwe can add the version after `=` following the package name.\nWe do that below, and we also include the version in the environment name.\n\n{{< fa user-edit >}} **_Let's run the command above and see if we can install `cutadapt`_**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda create -y -n cutadapt-4.1 -c bioconda cutadapt=4.1\n```\n:::\n\n\n:::{.bash-out}\nCollecting package metadata (current_repodata.json): done  \nSolving environment:\n:::\n\n:::{.callout-note collapse=\"true\"}\n## See the full output when I ran this command\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==> WARNING: A newer version of conda exists. <==\n  current version: 4.10.3\n  latest version: 4.13.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n\n## Package Plan ##\n\n  environment location: /fs/project/PAS0471/jelmer/conda/cutadapt-TMP\n\n  added / updated specs:\n    - cutadapt=4.1\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    cutadapt-4.1               |  py310h1425a21_1         211 KB  bioconda\n    dnaio-0.9.1                |  py310h1425a21_1          80 KB  bioconda\n    libsqlite-3.39.2           |       h753d276_1         789 KB  conda-forge\n    openssl-3.0.5              |       h166bdaf_1         2.8 MB  conda-forge\n    pip-22.2.2                 |     pyhd8ed1ab_0         1.5 MB  conda-forge\n    python-isal-1.0.1          |  py310h5764c6d_0          47 KB  conda-forge\n    setuptools-65.0.2          |  py310hff52083_0         1.4 MB  conda-forge\n    sqlite-3.39.2              |       h4ff8645_1         788 KB  conda-forge\n    tzdata-2022c               |       h191b570_0         119 KB  conda-forge\n    xopen-1.6.0                |  py310hff52083_0          27 KB  conda-forge\n    xz-5.2.6                   |       h166bdaf_0         409 KB  conda-forge\n    ------------------------------------------------------------\n                                           Total:         8.1 MB\n\nThe following NEW packages will be INSTALLED:\n\n  _libgcc_mutex      conda-forge/linux-64::_libgcc_mutex-0.1-conda_forge\n  _openmp_mutex      conda-forge/linux-64::_openmp_mutex-4.5-2_gnu\n  bzip2              conda-forge/linux-64::bzip2-1.0.8-h7f98852_4\n  ca-certificates    conda-forge/linux-64::ca-certificates-2022.6.15-ha878542_0\n  cutadapt           bioconda/linux-64::cutadapt-4.1-py310h1425a21_1\n  dnaio              bioconda/linux-64::dnaio-0.9.1-py310h1425a21_1\n  isa-l              conda-forge/linux-64::isa-l-2.30.0-ha770c72_4\n  ld_impl_linux-64   conda-forge/linux-64::ld_impl_linux-64-2.36.1-hea4e1c9_2\n  libffi             conda-forge/linux-64::libffi-3.4.2-h7f98852_5\n  libgcc-ng          conda-forge/linux-64::libgcc-ng-12.1.0-h8d9b700_16\n  libgomp            conda-forge/linux-64::libgomp-12.1.0-h8d9b700_16\n  libnsl             conda-forge/linux-64::libnsl-2.0.0-h7f98852_0\n  libsqlite          conda-forge/linux-64::libsqlite-3.39.2-h753d276_1\n  libuuid            conda-forge/linux-64::libuuid-2.32.1-h7f98852_1000\n  libzlib            conda-forge/linux-64::libzlib-1.2.12-h166bdaf_2\n  ncurses            conda-forge/linux-64::ncurses-6.3-h27087fc_1\n  openssl            conda-forge/linux-64::openssl-3.0.5-h166bdaf_1\n  pbzip2             conda-forge/linux-64::pbzip2-1.1.13-0\n  pigz               conda-forge/linux-64::pigz-2.6-h27826a3_0\n  pip                conda-forge/noarch::pip-22.2.2-pyhd8ed1ab_0\n  python             conda-forge/linux-64::python-3.10.5-ha86cf86_0_cpython\n  python-isal        conda-forge/linux-64::python-isal-1.0.1-py310h5764c6d_0\n  python_abi         conda-forge/linux-64::python_abi-3.10-2_cp310\n  readline           conda-forge/linux-64::readline-8.1.2-h0f457ee_0\n  setuptools         conda-forge/linux-64::setuptools-65.0.2-py310hff52083_0\n  sqlite             conda-forge/linux-64::sqlite-3.39.2-h4ff8645_1\n  tk                 conda-forge/linux-64::tk-8.6.12-h27826a3_0\n  tzdata             conda-forge/noarch::tzdata-2022c-h191b570_0\n  wheel              conda-forge/noarch::wheel-0.37.1-pyhd8ed1ab_0\n  xopen              conda-forge/linux-64::xopen-1.6.0-py310hff52083_0\n  xz                 conda-forge/linux-64::xz-5.2.6-h166bdaf_0\n  zlib               conda-forge/linux-64::zlib-1.2.12-h166bdaf_2\n\n\n\nDownloading and Extracting Packages\nsqlite-3.39.2        | 788 KB    | ################################################################################################################################################################### | 100% \nxz-5.2.6             | 409 KB    | ################################################################################################################################################################### | 100% \ncutadapt-4.1         | 211 KB    | ################################################################################################################################################################### | 100% \nxopen-1.6.0          | 27 KB     | ################################################################################################################################################################### | 100% \nlibsqlite-3.39.2     | 789 KB    | ################################################################################################################################################################### | 100% \ndnaio-0.9.1          | 80 KB     | ################################################################################################################################################################### | 100% \npython-isal-1.0.1    | 47 KB     | ################################################################################################################################################################### | 100% \nsetuptools-65.0.2    | 1.4 MB    | ################################################################################################################################################################### | 100% \npip-22.2.2           | 1.5 MB    | ################################################################################################################################################################### | 100% \ntzdata-2022c         | 119 KB    | ################################################################################################################################################################### | 100% \nopenssl-3.0.5        | 2.8 MB    | ################################################################################################################################################################### | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use\n#\n#     $ conda activate cutadapt-4.1\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n```\n:::\n:::\n\n:::\n\n<br>\n\n### Activating conda environments\n\nWhereas we use the term \"load\" for `Lmod` modules,\nwe use **\"activate\"** for conda environments &mdash; it means the same thing. \nOddly enough, the most foolproof way to activate a conda environment is to\nuse `source activate` rather than the expected `conda activate` &mdash;\nfor instance:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsource activate cutadapt-4.1\n```\n:::\n\n\n:::{.bash-out}\n(cutadapt-4.1) [jelmer@pitzer-login03 PAS2250]$\n:::\n\n:::{.callout-tip}\n## Environment indicator\nWhen we have an active conda environment, its name is conveniently displayed\nin our prompt, as depicted above.\n:::\n\nAfter we have activated the `cutadapt` environment, \nwe should be able to actually use the program.\nTo test this, we'll again simply run it with a `--help` option:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncutadapt --help | head     # I'm piping into head to avoid pages worth of output \n```\n:::\n\n\n:::{.bash-out}\ncutadapt version 4.1\n\nCopyright (C) 2010-2022 Marcel Martin <marcel.martin@scilifelab.se>\n\ncutadapt removes adapter sequences from high-throughput sequencing reads.\n\nUsage:  \n&nbsp; &nbsp; &nbsp; &nbsp; cutadapt -a ADAPTER [options] [-o output.fastq] input.fastq\n\nFor paired-end reads:\n:::\n\n<br>\n\n### Creating an environment for _any_ program \n\nMinor variations on the `conda create` command above can be used to install\nalmost any program for which is conda package is available.\nHowever, you may be wondering how we would know:\n\n- Whether the program is available and what its conda package's name is\n- Which conda channel we should use\n- Which versions are available\n\nMy strategy to finding these things out is to simply Google the program name\ntogether with \"conda\", e.g. `cutadapt conda`.\n\nLet's see that in action:\n\n<p align=\"center\">\n<img src=img/conda_google.png width=\"85%\">\n</p>\n\n<br>\n\nWe click on that first link (it should always be the first Google hit):\n\n<p align=\"center\">\n<img src=img/conda_website.png width=\"85%\">\n</p>\n\nI always take the top of the two example installation commands as a template,\nhere: `conda install -c bioconda cutadapt`\n\nYou may notice the `install` subcommand, which we haven't yet seen.\nThis would install Cutadapt into _the currently activated conda environment_.\nSince our strategy here --and my general strategy-- is to create a new\nenvironment each time you're installing a program,\nthe all-in-one command is to replace `install` by `create -y -n <env-name>`.\n\nThen, our full command (without version specification) again becomes:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda create -y -n cutadapt -c bioconda cutadapt\n```\n:::\n\n\nTo see which **version** will be installed by default,\nand to see which older versions are available:\n\n<p align=\"center\">\n<img src=img/conda_website_version.png width=\"70%\">\n</p>\n\nFor almost any other program, this works exactly the same!\n\n### Lines to add to your Bash script\n\nWhile you'll typically want to do installation interactively\nand only need to do to it once (see note below),\nyou should always include the necessary code to load/activate your programs\nin your shell scripts.\n\nWhen your program is in an `Lmod` module,\nthis simply entails a `module load` call &mdash;\ne.g., for `fastqc`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\n# Load software\nmodule load fastqc\n```\n:::\n\n\nWhen your program is available in a conda environment,\nthis entails a `module load` command to load conda itself,\nfollowed by a  `source activate` command to load the relevant conda environment:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n\n# Load software\nmodule load miniconda3\nsource activate cutadapt-4.1\n\n# Strict/safe Bash settings \nset -ueo pipefail\n```\n:::\n\n\n:::{.callout-warning}\nWe've moved the `set -ueo pipefail` line _below_ the `source activate` command,\nbecause the conda activation procedure can sometims throw \"unbound variable\"\nerrors otherwise.\n:::\n\n:::{.callout-note}\n## Install once, load/activate always\n\n- Provided you don't need to switch versions,\n  **you only need to install a program once**.\n  This is true also at OSC and also when using conda:\n  your environments won't disappear unless you delete them.\n\n- In every single \"session\" that you want to use a program via an `Lmod` module\n  or a conda environment,\n  you need to load/activate the program.\n  So the line(s) to do so should always be in your script for that program.\n:::\n\n<br>\n<br>\n\n-----\n\n-----\n\n## Addendum: a few other useful conda commands\n\n- Deactivate the currently active conda environment:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda deactivate   \n  ```\n  :::\n\n\n- Activate one environment and then \"stack\" an _additional_ environment\n  (a regular `conda activate` command would _switch_ environments):\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  source activate cutadapt         # Now, the env \"cutadapt\" is active\n  conda activate --stack multiqc   # Now, both \"cutadapt\" and \"multiqc\" are active\n  ```\n  :::\n\n\n- Remove an environment entirely:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda env remove -n cutadapt\n  ```\n  :::\n\n\n- List all your conda environments:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda env list\n  ```\n  :::\n\n\n- List all packages (programs) installed in an environment:\n\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  conda list -n cutadapt\n  ```\n  :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}