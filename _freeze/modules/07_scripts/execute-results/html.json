{
  "hash": "15001b6f1ce6660b47e56e88f8b1ab0d",
  "result": {
    "markdown": "---\ntitle: \"Shell Scripting\"\npagetitle: \"Shell Scripting\"\nhighlight-style: github\nnumber-sections: true\nknitr:\n  opts_knit:\n    root.dir: \"sandbox\"\nauthor: Jelmer Poelstra\n---\n\n::: {.cell}\n\n:::\n\n\n-----\n\n::: {.callout-note}\n\n**Add keyboard shortcut to run shell commands from the editor:**\n\n- Click the <i class=\"fa fa-cog\"></i> (bottom-left) => `Keyboard Shortcuts`.\n\n- Find `Terminal: Run Selected Text in Active Terminal`, click on it,\n  then add a shortcut, e.g. <kbd>Ctrl</kbd>+<kbd>Enter</kbd>.\n\n:::\n\nShell scripts (or to be slightly more precise, Bash scripts)\nenable us to **run sets of commands non-interactively**.\nThis is especially beneficial or necessary when a set of commands:\n\n  - Takes a long time to run and/or\n  - Should be run many times, e.g. for different samples\n\nScripts form the basis for *analysis pipelines* and if we code things cleverly,\nit should be straightforward to rerun much of our project workflow:\n  \n- After removing or adding a sample\n- For different parameter settings\n- And possibly even for an entirely different dataset. \n\n<br>\n\n## Setup\n\n:::{.callout-note collapse=\"true\"}\n## Starting a VS Code session with an active terminal (click here)\n\n1. Log in to OSC at <https://ondemand.osc.edu>.\n2. In the blue top bar, select `Interactive Apps` and then `Code Server`.\n3. In the form that appears:\n   - Enter `4` or more in the box `Number of hours`\n   - **To avoid having to switch folders within VS Code**,\n     enter `/fs/ess/scratch/PAS2250/participants/<your-folder>` in the box `Working Directory`\n     (replace `<your-folder>` by the actual name of your folder).\n   - Click `Launch`.\n4. On the next page,\n   once the top bar of the box is green and says `Runnning`,\n   click `Connect to VS Code`.\n5. Open a terminal: {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.\n6. In the terminal, type `bash` and press <kbd>Enter</kbd>.\n7. Type `pwd` in the termain to check you are in `/fs/ess/scratch/PAS2250`.\n   \n   If not, click\n   {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`\n   and enter `/fs/ess/scratch/PAS2250/<your-folder>`.\n\n:::\n\n<br>\n\n## Script header lines and zombie scripts\n\n### Shebang line\n\nWe use a so-called \"_shebang_\" line as the first line of a script\nto **indicate which language our script uses**.\nMore specifically, this line tell the computer where to find the binary\n(executable) that will run our script.\n  \nSuch a line starts with **`#!`**,\nbasically marking it as a special type of comment.\nAfter that, we provide the location to the relevant program:\nin our case Bash, which is located at `/bin/bash` on Linux and Mac computers.\n\n```sh\n#!/bin/bash\n```\n\nAdding a shebang line is good practice in general,\nand is necessary when we want to submit our script to OSC's Slurm queue,\nwhich we'll do tomorrow.\n\n<br>\n\n### Bash script settings\n\nAnother line that is good practice to add to your Bash scripts changes some\ndefault settings to safer alternatives.\nThe following two Bash default settings are bad ideas inside scripts:\n\n_First_, and as we've seen in the previous module,\nBash does not complain when you\n**reference a variable that does not exist**\n(in other words, it does not consider that an error).\n\nIn scripts, this can lead to all sorts of downstream problems,\nbecause you very likely tried and failed to do something with an actual variable.\nEven more problematically,\nit can lead to potentially very destructive file removal:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Using a variable, we try to remove some temporary files whose names start with tmp_\ntemp_prefix=\"temp_\"\nrm \"$tmp_prefix\"*     # DON'T TRY THIS!\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Using a variable, we try to remove a temporary directory\ntempdir=output/tmp\nrm -rf $tmpdir/*      # DON'T TRY THIS!\n```\n:::\n\n  \n\n:::{.callout-caution collapse=\"true\"}\n## The comments above specified the _intent_ we had. What would have actually happened?\n  \nIn both examples, there is a similar typo: `temp` vs. `tmp`,\nwhich means that we are referencing a (likely) non-existent variable.\n\n- In the first example,\n  `rm \"$tmp_prefix\"*` would have been interpreted as `rm *`,\n  because the non-existent variable is simply ignored.\n  Therefore, we would have **removed all files in the current working directory**.\n\n- In the second example, along similar lines,\n  `rm -rf $tmpdir/*` would have been interpreted as `rm -rf /*`.\n  Horrifyingly, this would **attempt to remove the entire filesystem**\n  (recall that a leading `/` in a path is a computer's root directory).[^1]\n  (`-r` makes the removal _recursive_ and `-f` makes _forces_ removal).\n\n[^1]: But note that at OSC,\nyou would not be able to remove anything you're not supposed to,\nsince you don't have the permissions to do so.\nOn your own computer, this could be more genuinely dangerous, though even there,\nyou would not be able to remove the operating system without specifically\nrequesting  \"admin\" rights.\n:::\n\n----\n\n_Second_, a Bash script **keeps running after encountering errors**.\nThat is, if an error is encountered when running line 2 of a script,\nany remaining lines in the script will nevertheless be executed.\n\nIn the best case, this is a waste of computer resources,\nand in worse cases, it can lead to all kinds of unintended consequences.\nAdditionally, if your script prints a lot of output,\nyou might not notice an error somewhere in the middle if it doesn't produce\nmore errors downstream.\nBut the downstream results from what we at that point might call a\n\"**zombie script**\" may still be completely wrong.\n\n----\n\nThe following three settings will make your Bash scripts more robust and safer.\nWith these settings, the script terminates,\nwith an appropriate error message, if:\n\n- `set -u` &mdash; An unset (non-existent) variable is referenced.\n- `set -e` &mdash; Almost any error occurs.\n- `set -o pipefail` &mdash; An error occurs in a shell \"pipeline\"\n  (e.g., `sort | uniq`).\n\nWe can change all of these settings in one line in a script:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nset -u -e -o pipefail     # (For in a script - don't run in the terminal)\n```\n:::\n\n\nOr even more concisely:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nset -ueo pipefail         # (For in a script - don't run in the terminal)\n```\n:::\n\n\n<br>\n\n### Our header lines as a rudimentary script\n\nLet's go ahead and start a script with the header lines\nthat we have so far discussed.\n\n- Inside your personal directory within `/fs/ess/scratch/PAS2250/participants`,\n  make a directory called `scripts` and one called `sandbox`\n  (e.g. `mkdir scripts sandbox`, or use the VS Code menus.\n\n- Open a new file in the `VS Code` editor\n  (&nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `New File`)\n  and save it as `printname.sh` within the newly created `scripts` dir.\n\n  :::{.callout-note}\n  ## Shell scripts, including Bash scripts, most commonly have the extension `.sh`\n  :::\n  \n- Type the following lines in that script (not in your terminal!):\n  \n\n  ::: {.cell}\n  \n  ```{.bash .cell-code}\n  #!/bin/bash\n  set -ueo pipefail\n  ```\n  :::\n\n\nAlready now, we could _run_ (execute) the script.\nOne way of doing this is calling the `bash` command\nfollowed by the name of the script[^2]:\n\n[^2]: Because our script has a shebang line,\nwe could also execute the script without the `bash` command using\n`./printname.sh`.\nHowever, this would also require us to \"make the script executable\",\nwhich is beyond the scope of this workshop.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printname.sh\n```\n:::\n\n\nDoing this won't print anything to screen (or file).\nSince our script doesn't have any output, that makes sense &mdash;\nno output can be a good sign, because it means that no errors were encountered.\n\n<br>\n\n## Command-line arguments for scripts\n\n### Calling a script with arguments\n\nWhen you call a script, you can pass it command-line arguments,\nsuch as a file to operate on.\n\nThis is much like when you provide a command like `ls` with arguments:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Run ls without arguments:\nls\n\n# Pass 1 filename as an argument to ls:\nls data/sampleA.fastq.gz\n\n# Pass 2 filenames as arguments to ls, separated by spaces:\nls data/sampleA.fastq.gz data/sampleB.fastq.gz\n```\n:::\n\n\nLet's see what this would look like with our `printname.sh` script\nand a fictional script `fastqc.sh`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Run scripts without any arguments:\nbash fastqc.sh                            # (Fictional script)\nbash scripts/printname.sh\n\n# Run scripts with 1 or 2 arguments:\nbash fastqc.sh data/sampleA.fastq.gz      # 1 argument, a filename\nbash scripts/printname.sh John Doe        # 2 arguments, strings representing names\n```\n:::\n\n\nIn the next section, we'll see what happens when we pass arguments to a script\non the command line.\n\n<br>\n\n### Placeholder variables\n\nInside the script,\nany command-line arguments are _automatically available_ in placeholder variables.\n\nA first argument will be assigned to the variable **`$1`**,\nany second argument will be assigned to **`$2`**,\nany third argument will be assigned to **`$3`**, and so on.\n\n:::{.callout-caution collapse=\"true\"}\n## In the calls to fastqc.sh and printname.sh above, what are the placeholder variables and their values? \n\nIn `bash fastqc.sh data/sampleA.fastq.gz`,\na single argument, `data/sampleA.fastq.gz`, is passed to the script,\nand will be assigned to `$1`.\n\nIn `bash scripts/printname.sh John Doe`,\ntwo arguments are passed to the script:\nthe first one (`John`) will be stored in `$1`,\nand the second one (`Doe`) in `$2`.\n:::\n\n:::{.callout-tip}\n## Placeholder variables are not automagically _used_\nArguments passed to a script are _merely made available_ in placeholder variables\n&mdash; unless we explicitly include code in the script to _do_ something with\nthose variables, nothing else happens. \n:::\n\nLet's add code to our `printname.sh` script to \"process\"\nany first and last name that are passed to the script as command-line arguments.\nFor now, our script will simply `echo` the placeholder variables,\nso that we can see what happens:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\necho \"First name: $1\"\necho \"Last name: $2\"\n\n# (Note: this is a script. Don't enter this directly in your terminal.)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nNext, we'll _run_ the script, passing the arguments `John` and `Doe`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printname.sh John Doe\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nFirst name: John\nLast name: Doe\n```\n:::\n:::\n\n\n:::{.exercise}\n### On Your Own: Command-line arguments {-}\n\nIn each case below, **think about what might happen before you run the script**.\nThen, run it, and if you didn't make a successful prediction,\ntry to figure out what happened instead.\n\n1. Run the script (`scripts/printname.sh`) without passing arguments to it.\n\n2. Deactivate (\"comment out\") the line with `set` settings\n   by inserting a `#` as the first character.\n   Then, run the script again without passing arguments to it.\n\n3. Double-quote `John Doe` when you run the script,\n   i.e. run `bash scripts/printname.sh \"John Doe\"`\n\nTo get back to where we were,\nremove the `#` you inserted in the script in step 2 above.\n\n:::{.callout-tip collapse=\"true\"}\n## Solutions\n\n1. The script will error out because we are referencing variables that don't\n   exist: since we didn't pass command-line arguments to the script,\n   the `$1` and `$2` have not been set.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printname.sh\n```\n:::\n\n\n:::{.bash-out}\nprintname.sh: line 4: $1: unbound variable\n:::\n\n2. The script will run in its entirety and not throw any errors,\n   because we are now using default Bash settings such that referencing \n   non-existent variables does not throw an error.\n   Of course, no names are printed either, since we didn't specify any:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printname.sh\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nFirst name: \nLast name: \n```\n:::\n:::\n\n\nBeing commented out, the `set` line should read:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#set -ueo pipefail\n```\n:::\n\n\n3. Because we are quoting `\"John Doe\"`,\n   both names are passed _as a single argument_ and both names end up in `$1`,\n   the \"first name\":\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printname.sh \"John Doe\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nFirst name: John Doe\nLast name: \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n:::\n:::\n\n<br>\n\n### Descriptive variable names\n\nWhile you can use the `$1`-style placeholder variables throughout your script,\nI find it very useful to copy them to more descriptively named variables\nas follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\nfirst_name=$1\nlast_name=$2\n  \necho \"First name: $first_name\"\necho \"Last name: $last_name\"\n\n# (Note: this is a script. Don't enter this directly in your terminal.)\n```\n:::\n\n\nUsing descriptively named variables in your scripts has several advantages.\nIt will make your script easier to understand for others and for yourself.\nIt will also make it less likely that you make errors in your script\nin which you use the wrong variable in the wrong place.\n\n:::{.callout-note}\n## Other variables that are automatically available inside scripts\n\n- `$0` contains the script's file name\n- `$#` contains the _number_ of command-line arguments passed\n\n:::\n\n:::{.exercise}\n\n### On Your Own: A script to print a specific line {-}\n\nWrite a script that prints a specific line (identified by line number)\nfrom a file.\n\n- Open a new file and save it as `scripts/printline.sh`\n- Start with the _shebang_ and `set` lines\n- Your script takes two arguments: a file name (`$1`) and a line number (`$2`) \n- Copy the `$1` and `$2` variables to descriptively named variables\n- To print a specific line,\n  think how you might combine `head` and `tail` to do this.\n  If you're at a loss, feel free to check out the top solution box.\n- Test the script by printing line 4 from `data/meta/meta.tsv`.\n\n:::{.callout-tip collapse=\"true\"}\n## Solution: how to print a specific line number\n\nFor example, to print line 4 of `data/meta/meta.tsv` directly:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -n 4 data/meta/meta.tsv | tail -n 1\n```\n:::\n\n\nJust note that in the script,\nyou'll be using variables instead of the \"hardcode values\"\n`4` and `data/meta/meta.tsv`.\n\nHow this command works:\n\n- `head -n 4 data/meta/meta.tsv` will print the first 4 lines of `data/meta/meta.tsv`\n- We pipe those 4 lines into the `tail` command\n- We ask `tail` to just print the last line of its input,\n  which will in this case be line 4 of the original input file.\n\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## Full solution\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n  \ninput_file=$1\nline_nr=$2\n\nhead -n \"$line_nr\" \"$input_file\" | tail -n 1\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nTo run the script and make it print the 4th line of `meta.tsv`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printline.sh data/meta/meta.tsv 4\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nSRR7609471\tbeach\tcontrol\t3\t40982374\t78.70\n```\n:::\n:::\n\n:::\n:::\n\n<br>\n\n## Script variations and improvements\n\n### A script to serve as a starting point\n\nWe've learned that the `head` command prints the first lines of a file,\nwhereas the `tail` command prints the last lines.\nSometimes it's nice to be able to quickly see both ends of a file,\nso let's write a little script that can do that for us,\nas a starting point for the next few modifications.\n\nOpen a new file, save it as `scripts/headtail.sh`,\nand add the following code to it:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\ninput_file=$1\n\nhead -n 2 \"$input_file\"\necho \"---\"\ntail -n 2 \"$input_file\"\n\n# (Note: this is a script. Don't enter this directly in your terminal.)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nNext, let's run our `headtail.sh` script:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/headtail.sh data/meta/meta.tsv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\naccession\tlocation\ttreatment\treplicate\tnreads_raw\tpct_mapped\nSRR7609473\tbeach\tcontrol\t1\t45285752\t76.01\n---\nSRR7609467\tinland\ttreatment\t2\t47303936\t79.25\nSRR7609474\tinland\ttreatment\t3\t55728624\t78.80\n```\n:::\n:::\n\n\n<br>\n\n### Redirecting output to a file\n\nSo far, the output of our scripts was printed to screen, e.g.:\n\n- In `printnames.sh`, we simply `echo`'d, inside sentences,\n  the arguments passed to the script.\n- In `headtail.sh`, we printed the first and last few lines of a file.\n\nAll this output was printed to screen because that is the default output\nmode of Unix commands,\nand this works the same way regardless of whether those commands\nare run directly on the command line, or are run inside a script.\n\nAlong those same lines, we have already learned that we can \"redirect\" output\nto a file using `>` (write/overwrite) and `>>` (append) when we run shell commands &mdash; and this, too, works exactly the same way inside a script.\n\n-----\n\nWhen working with genomics data,\nwe commonly have files as input, and new/modified files as output.\nLet's practice with this and\n**modify our `headtail.sh` script so that it writes output to a file.**\n\nWe'll make the following changes:\n\n- We will have the script accept a second argument: the output file name[^8].\n  \n- We will redirect the output of our `head`, `echo`, and `tail` commands to\n  the output file. We'll have to append (using `>>`) in the last two commands.\n\n[^8]: Of course, we _could_ also simply write the output to a predefined\n      (\"hardcoded\") file name such as `out.txt`,\n      but in general, it's better practice to keep this flexible via an argument.\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\ninput_file=$1\noutput_file=$2\n\nhead -n 2 \"$input_file\" > \"$output_file\"\necho \"---\" >> \"$output_file\"\ntail -n 2 \"$input_file\" >> \"$output_file\"\n\n# (Note: this is a script. Don't enter this directly in your terminal.)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nNow we run the script again, this time also passing the name of an _output_ file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/headtail.sh data/meta/meta.tsv sandbox/samples_headtail.txt\n```\n:::\n\n\nThe script will no longer print any output to screen,\nand our output should instead be in `sandbox/samples_headtail.txt`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Check that the file exists and was just modified:\nls -lh sandbox/samples_headtail.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\n-rw-r--r--@ 1 poelstra.1  staff   197B Aug  8 10:02 sandbox/samples_headtail.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Print the contents of the file to screen\ncat sandbox/samples_headtail.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\naccession\tlocation\ttreatment\treplicate\tnreads_raw\tpct_mapped\nSRR7609473\tbeach\tcontrol\t1\t45285752\t76.01\n---\nSRR7609467\tinland\ttreatment\t2\t47303936\t79.25\nSRR7609474\tinland\ttreatment\t3\t55728624\t78.80\n```\n:::\n:::\n\n\n<br>\n\n### Report what's happening\n\nIt is often useful to have your scripts \"report\" or \"log\" what is going on.\nLet's keep thinking about a script that has file(s) as the main output,\nbut instead of having no output printed to screen at all,\nwe'll print some logging output to screen.\nFor instance:\n\n- What is the date and time\n- Which arguments were passed to the script\n- What are the output files\n- Perhaps even summaries of the output.\n\nAll of this can help with troubleshooting and record-keeping.[^3]\nLet's try this with our `headtail.sh` script.\n\n[^3]: We'll see in the upcoming `SLURM` module that we when\n      submit scripts to the OSC queue (rather than running them directly),\n      the output of scripts that is normally printed to screen,\n      will instead go to a sort of \"log\" file.\n      So, your script's reporting will end up in this file.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\n## Copy placeholder variables\ninput_file=$1\noutput_file=$2\n\n## Initial logging \necho \"Starting script $0\"           # Print name of script\ndate                                # Print date & time\necho \"Input file:   $input_file\"\necho \"Output file:  $output_file\" \necho                                # Print empty line to separate initial & final logging\n\n## Print the first and last two lines to a separate file\nhead -n 2 \"$input_file\" > \"$output_file\"\necho \"---\" >> \"$output_file\"\ntail -n 2 \"$input_file\" >> \"$output_file\"\n\n## Final logging\necho \"Listing the output file:\"\nls -lh \"$output_file\"\necho \"Done with script $0\"\ndate\n\n# (Note: this is a script. Don't enter this directly in your terminal.)\n```\n:::\n\n\nA couple of notes about the lines that were added to the script above:\n\n- Printing the `date` at the end of the script as well will allow you to check\n  for how long the script ran, which can be informative for longer-running\n  scripts.\n  \n- Printing the input and output files\n  (and the command-line arguments more generally) can be particularly useful\n  for troubleshooting\n\n- We printed a \"marker line\" like `Done with script`,\n  indicating that the end of the script was reached.\n  This is handy due to our `set` settings:\n  seeing this line printed means that no errors were encountered.\n\n- I also added some comment headers like \"Initial logging\" to make the script\n  easier to read, and such comments can be made more extensive to really explain\n  what is being done.\n\n\n::: {.cell}\n\n:::\n\n\nLet's run the script again:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/headtail.sh data/meta/meta.tsv sandbox/tmp.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nStarting script scripts/headtail.sh\nTue Aug  8 10:02:13 EDT 2023\nInput file:   data/meta/meta.tsv\nOutput file:  sandbox/tmp.txt\n\nListing the output file:\n-rw-r--r--@ 1 poelstra.1  staff   197B Aug  8 10:02 sandbox/tmp.txt\nDone with script scripts/headtail.sh\nTue Aug  8 10:02:13 EDT 2023\n```\n:::\n:::\n\n\nThe script printed some details for the output file, but not its contents\n(that would have worked here,\nbut is usually not sensible when working with genomics data).\nLet's take a look, though, to make sure the script worked:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat sandbox/tmp.txt      # \"cat\" prints all of a file's contents\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\naccession\tlocation\ttreatment\treplicate\tnreads_raw\tpct_mapped\nSRR7609473\tbeach\tcontrol\t1\t45285752\t76.01\n---\nSRR7609467\tinland\ttreatment\t2\t47303936\t79.25\nSRR7609474\tinland\ttreatment\t3\t55728624\t78.80\n```\n:::\n:::\n\n\n:::{.callout-tip}\n## `echo`, `echo`\nThe extensive reporting (`echo`-ing) may have seemed silly for our little script,\nbut fairly extensive reporting\n(as well as testing, but that's outside the scope of this workshop)\ncan be very useful &mdash; and will be eventually a time-saver.\n  \nThis is especially true for long-running scripts,\nor scripts that you often reuse and perhaps share with others.\n:::\n\n:::{.exercise}\n### On Your Own: A fanciful script {-}\n\nModify your `printline.sh` script to:\n\n- Redirect output to a file\n- This output file should not be \"hardcoded\" in the script,\n  but its name should be passed as an argument to the script,\n  like we did above with `headtail.sh`\n- Add a bit of reporting &mdash; `echo` statements, `date`, etc,\n  along the lines of what we did above with `headtail.sh`\n- Add some comments to describe what the code in the script is doing\n\n:::{.callout-note collapse=\"true\"}\n## The original `printline.sh` script\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\n#!/bin/bash\nset -ueo pipefail\n  \ninput_file=$1\nline_nr=$2\n\nhead -n \"$line_nr\" \"$input_file\" | tail -n 1\n```\n:::\n:::\n\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## (One possible) solution\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\nset -ueo pipefail\n\n## Copy placeholder variables\ninput_file=$1\noutput_file=$2\nline_nr=$3\n\n## Initial logging \necho \"Starting script $0\"           # Print name of script\ndate                                # Print date & time\necho \"Input file:   $input_file\"\necho \"Output file:  $output_file\"\necho \"Line number:  $line_nr\"\necho                                # Print empty line to separate initial & final logging\n\n## Print 1 specific line from the input file and redirect to an output file\nhead -n \"$line_nr\" \"$input_file\" | tail -n 1 > $output_file\n\n## Final logging\necho \"Listing the output file:\"\nls -lh \"$output_file\"\necho \"Done with script $0\"\ndate\n```\n:::\n\n\nTo run the script with the additional argument:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash scripts/printline.sh data/meta/meta.tsv sandbox/meta_line.tsv 4\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.bash-out}\nStarting script scripts/printline.sh\nTue Aug  8 10:02:13 EDT 2023\nInput file:   data/meta/meta.tsv\nOutput file:  sandbox/meta_line.tsv\nLine number:  4\n\nListing the output file:\n-rw-r--r--@ 1 poelstra.1  staff    42B Aug  8 10:02 sandbox/meta_line.tsv\nDone with script scripts/printline.sh\nTue Aug  8 10:02:13 EDT 2023\n```\n:::\n:::\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}