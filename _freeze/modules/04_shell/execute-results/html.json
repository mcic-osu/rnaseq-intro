{
  "hash": "70134ec4254ed777105982b02121f8ad",
  "result": {
    "markdown": "---\ntitle: \"The Unix Shell\"\nsubtitle: \"And an introduction to our dataset with FASTQ and FASTA files\"\npagetitle: \"Unix Shell\"\nhighlight-style: github\nnumber-sections: true\nauthor: Mike Sovic\n---\n\n::: {.cell}\n\n:::\n\n\n-----\n\n<br>\n\n## The Unix Shell/Command Line Computing\n\nMany of the things you typically do by pointing and clicking can alternatively be done with command line approaches. The Unix shell allows you to interact with the supercomputer in a command-line environment. The **Code Server/VS Code** software Jelmer just introduced is one of several methods available for accessing the Unix shell, and the one we'll use through the workshop. Now that we have the platform for interacting with the supercomputer, we'll dive into command line computing. \n\n## Overview\n\nWorking effectively on a remote supercomputer requires doing command-line computing. But there are more advantages to doing command line computing than just allowing you to work on a supercomputer.\n\n### Some Terminology\n\nWe're going to focus on the practice of doing command line computing here, and not get too bogged down in to details of terminology, but let's highlight a few terms you're likely to run across (and hear during the workshop). \n\n  - Command Line\n  - Shell\n  - Terminal\n  - Console\n  - Bash\n  \nWhile it might not fly for a computer science class, for day-to-day bioinformatics, you'll probably hear all these terms used somewhat interchangably. Basically, we're talking about the process of interacting with your computer by giving it commands as opposed to the point-and-click way you're likely more familiar with.\n\n### Advantages to Command Line Computing\n\n  - Interact with a remote computer\n  - Work efficiently with large files\n  - Achieve reproducibility in research\n  - Perform general computing tasks more efficiently\n\n### Structure Of Command Line Expressions\n\nWe'll think of command line expressions as having 3 main parts. Don't worry about following along here - there will be plenty of chances to try this out shortly. For now, just treat this as a demonstration and focus on these 3 components...\n  \n  - Commands\n  - Options or Arguments\n  - Output\n  \n#### Command Line Commands\n\nThe prompt indicates the shell is ready for a command. \n\n  <p align=\"left\">\n  <img src=img/prompt1.png width=\"100%\">\n  </p>\n\nLet's start with the `ls` command.\n\n  <p align=\"left\">\n  <img src=img/ls.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/ls_output.png width=\"100%\">\n  </p>\n\nHere, we've given a **command, `ls`**, and the shell has returned some output -- in this case, listing the contents of the current directory. It has also returned another prompt, meaning it's ready for another command.\n\nNow we'll run the same command again, but this time we'll add in an **option `-l`** (a dash followed by a lowercase L). Options allow you to modify the behavior of a command.\n  \n  <p align=\"left\">\n  <img src=img/ls_long.png width=\"100%\">\n  </p>\n\n  <p align=\"left\">\n  <img src=img/ls_long_out.png width=\"100%\">\n  </p>\n  \nNotice that the same four items are returned, but this time, they're printed in a different format, and additional information is included. \n\nLet's try adding one more option/argument -- `-h`.\n\n  <p align=\"left\">\n  <img src=img/ls_lh.png width=\"100%\">\n  </p>\n\n  <p align=\"left\">\n  <img src=img/ls_lh_out.png width=\"100%\">\n  </p>\n\nCan you pick out what `-h` did to modify the output? Note the difference in the format of the column reporting the sizes of the items listed.\n\n### Commonly-Used Commands\n\nBelow are some commands I find myself using quite a bit, grouped into some general categories based on their primary function...\n\n  - **Getting Info About a Command**\n    - `man`: get help (manual) for a command\n  - **Navigating in the Terminal**\n    - `pwd`: returns (prints) your working directory\n    - `cd`: change working directory\n  - **Viewing Files**\n    - `less`: view contents of a file\n    - `head`: preview contents of a file\n    - `tail`: print the last lines of a file\n    - `cat`: print contents of file to screen\n  - **Managing/Organizing Files**\n    - `ls`: list contents of directory\n    - `mkdir`: create a new directory\n    - `rm`: remove/delete a file or directory\n    - `cp`: copy files/directories to a new location\n    - `mv`: move files/directories to a new location\n  - **Working With Compressed Files**\n    - `gzip`: compress a file with gzip compression\n    - `gunzip`: uncompress a gzip file\n    - `zcat`/`gzcat`: print the uncompressed contents of a compressed file to the screen\n    - `unzip`: uncompress a zip file\n  - **Assessing Files**\n    - `diff`: print differences in two text files\n    - `md5`: get and md5 checksum for a file\n    - `grep`: search a text file for lines containing a pattern of text\n    - `wc`: return number of lines, words, characters in a file\n  - **Editing Files**\n    - `sed`\n    - `awk`\n    - `sort`\n    - `tr`\n    - `uniq`\n  - **Obtaining/Sharing Files**\n    - `curl`: download a file from online\n    - `sftp`: transfer files between a local and remote computer\n    - `wget`: download a file from online\n  - **Features**\n    - Tab completion\n    - Command History (up arrow)\n    - <kbd>Ctrl</kbd>+<kbd>r</kbd>\n    - <kbd>Ctrl</kbd>+<kbd>c</kbd>\n  - **Special Notation**\n    - `|`\n    - `~`\n    - `.`\n    - `..`\n    - `$PATH`\n    - `$HOME`\n  - **Wildcards**\n    - `*`\n    - `?`\n    - `[]`\n    - `^`\n\nWhile it's not an exhaustive list, getting a grasp on some of the commands and features above will go a long way in allowing you to start to work at command line. We won't get to all of them in this session, but we'll explore quite a few on this list.\n\n## Practice with Common Commands\n\nHere we'll start practicing with some common command-line commands.\n\n:::{.callout-note}\n## Working Directories\n\nBefore we start with our first command, we should talk about directory paths and working directories. All the files on a computer exist within a hierarchical system of directories (folders). When working at command line, you are always \"in\" one of these directories. The directory you're \"in\" at any given time is referred to as your **working directory**.\n\nIt's useful to know what this is at any given time, and there's a command that tells you: `pwd`. This brings us to our first command.\n:::\n\n### `pwd`\n\nThe `pwd` command prints the absolute path of your current working directory. \n\n  <p align=\"left\">\n  <img src=img/pwd.png width=\"100%\">\n  </p>\n\n  <p align=\"left\">\n  <img src=img/pwd_out.png width=\"100%\">\n  </p>\n\nThe default working directory when you log on to OSC is your HOME directory. You'll likely make lots of use of this directory if you work at OSC, but for the workshop, we're all going to work in the scratch directory associated with the project set up for the workshop. So we'll move to that directory next.\n\n\n### `cd`\n\n`cd` allows you to change your working directory to any directory you have permission to access on the computer you're working on. And this is a great place to introduce **Tab Completion**, which you really should get in the habit of using...\n\n  <p align=\"left\">\n  <img src=img/cd1.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/cd2.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/cd3.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/cd4.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/cd5.png width=\"100%\">\n  </p>\n\n:::{.callout-note}\n## Absolute Paths vs Relative Paths\n\nWhat we've used here is an **absolute (full) path**. If you want to change directories, the `cd` command needs to know where you want to move to. As we just saw, we can give it that information by providing the **absolute path** to the directory on the computer we want to move to (starting with the root directory, which is indicated by the first `/` in the path `/fs/ess/scratch/PAS2250` above).\n\nProviding absolute paths will always work, but it's often a bit more typing than we need (or want) to do. An alternative is to work with **relative paths**. These work by assuming you're staring in your current working directory, and then, by default, looking forward in the directory structure (or down if you like to think from top to bottom). We'll come back to **relative paths** shortly.\n\n:::\n\nOK, we made it to a directory created specifically for this workshop. Let's see what's in there.\n\n### `ls`\n\nThe `ls` command lists everything inside the current directory.\n\n\n  <p align=\"left\">\n  <img src=img/ls2.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/ls2_out.png width=\"100%\">\n  </p>\n  \nHere we see 3 directories -- `data`, `jelmer`, and `participants`.\n\nLet's see what's inside the `data` directory (and another good chance to try **Tab Completion**)...\n\n  <p align=\"left\">\n  <img src=img/ls3.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/ls4.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/ls5.png width=\"100%\">\n  </p>\n  \nTwo more directories this time. Try viewing the contents of the `fastq` directory yourself...\n\n:::{.exercise}\n#### On Your Own: list the contents of a directory {-}\n\nTry to list the contents of the `fastq` directory we just saw.\n\n<details><summary>\nSolutions (click here)\n</summary>\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\nls data/fastq/\n```\n:::\n\n\n**OR**\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\ncd data/fastq/\nls\n```\n:::\n\n\n</details>\n    \n:::\n\nLet's check to make sure we're still in the `/fs/ess/scratch/PAS2250` directory,\nand also remind ourselves exactly what's in there...\n\n  <p align=\"left\">\n  <img src=img/pwd2.png width=\"100%\">\n  </p>\n  \nIf you're not in the `PAS2250` directory for some reason, you can use `cd` to get back there. You should see `data`, `jelmer`, and `participants` when listing the contents of your current directory.\n\nNow let's move our working directory again -- this time we'll go in to `participants`. We could use `cd` with the absolute path -- similar to what we did before. However, we'll save ourselves some typing and use a **relative path**. Keep using **Tab Completion**.\n\n  <p align=\"left\">\n  <img src=img/relative1.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/relative2.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/relative3.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/relative4.png width=\"100%\">\n  </p>\n\n\n### `mkdir`\n\nThe `mkdir` command allows you to create a new directory. Create one for yourself in the current directory (`participants`) according to this example (replace `mikes_dir` with a name for your folder -- avoid spaces and special characters in the name)...\n\n\n  <p align=\"left\">\n  <img src=img/mkdir1.png width=\"100%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/mkdir2.png width=\"100%\">\n  </p>\n  \n\n### Summary Thus Far\n\nSo far, we've used...\n\n - `pwd` (print working directory)\n - `cd` (change directory)\n - `ls` (list)\n - `mkdir` (make new directory)\n - Tab Completion (not really a command, but a useful feature)\n \nWe also have a directory structure that looks like...\n\n  <p align=\"left\">\n  <img src=img/dir_structure.png width=\"80%\">\n  </p>\n \nThe data files in the `data/fastq` directory are FASTQ formatted files from an RNA experiment, and are what we'll be analyzing as we go through the workshop. We'll talk more about them soon, but for now, let's make sure everyone has a copy of the data. We'll copy the `data` directory and its contents into the new directory you just made. \n\n  <p align=\"left\">\n  <img src=img/cp_diagram.png width=\"80%\">\n  </p>\n\n\n### `cp`\n\nThe `cp` command allows you to copy files or directories from one location to another. It has 2 required arguments -- what you want to copy, and where you want to copy it to.\n\nLet's start with what we want to copy. It's the `data` directory and all of its contents. Notice in the diagram above that `data` is at the same level in the directory structure as our current working directory, participants. This means using `data` as a **relative path** won't work, because the computer looks down the directory structure (it will see the contents of 'participants'). But there's a way to deal with that. We can use `..` to move us up a level in the directory structure.\n\n  <p align=\"left\">\n  <img src=img/cp1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/cp2.png width=\"80%\">\n  </p>\n  \nNotice we get a message that it omitted copying the directory `data` (which is what we wanted to copy). Indeed, the copy didn't work (you can `ls` the contents of the target directory to check -- it will still be empty). `cp` works in this simplest form with individual files, but not with directories that have contents inside them. If you want to copy a directory and all of its contents, we need one of those options that modify the behavior of the `cp` command. In this case, `-r`, which tells it to copy in a recursive manner.\n\nAnd this is a good spot to introduce the **Command History**. At the prompt, try hitting the up arrow. A record of all your previous commands is kept, so you can scroll back through them. Use this to get the previous `cp` command, and then add the `-r` argument.\n\n  <p align=\"left\">\n  <img src=img/cp3.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/cp4.png width=\"80%\">\n  </p>\n\nAnd we can check to make sure the copy worked...\n\n  <p align=\"left\">\n  <img src=img/cp5.png width=\"80%\">\n  </p>\n  \n### `man`\n\nWe haven't talked about `man` yet. This stands for manual, and is a great way to get details on any command. For example, we can check out the man page for `cp`...\n\n  <p align=\"left\">\n  <img src=img/man1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/man2.png width=\"80%\">\n  </p>\n\nIf you scroll down, you'll see information on the `-r` option we just used (among others). As it says at the bottom of the page, type <kbd>q</kbd> to quit and get back to your command line prompt.\n\n<br>\n\n## Working With Text Files\n\nNow let's start to explore our FASTQ files a bit. In preparation, it's a good chance to practice a few of the commands we've seen so far.\n\n:::{.exercise}\n\n#### On Your Own: Explore the Files {-}\n\nSet your working directory to the `data/fastq` directory inside the folder you created for yourself. Then list the contents of that `fastq` directory. How many files are in there? See if you can get the sizes of each file.\n\n<details><summary>\nHint (click here)\n</summary>\n\nUse `cd` and a relative path (`<your_dir>/data/fastq/`) to change you working directory.\n   \nOnce you're there, use `ls` to list the contents of the current directory.\nRecall the option that we used above to give more detailed information about each file, or  check out the `man` page for `ls`.\n   \n</details>\n\n<details><summary>\nSolutions (click here)\n</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd <your_dir>/data\n\nls\n\nls -l\n```\n:::\n\n  \n</details>\n::: \n\n### Compressed Files\n\nYou might have noticed these files all have a `.gz` extension, indicating they are 'gzip-compressed'. This is a common type of compression for large genomic-scale files. The fact that they're compressed means we can't just open them up and look inside -- we need to uncompress them first. The `gunzip` command would allow us to do this -- it uncompresses the file it's given and writes the uncompressed version to a new file.\n\nWe could do this, but there's another approach. FASTQ files can get big, and sometimes it helps to be able to keep them compressed as much as possible. It's a good time for us to explore the pipe.\n\n### `|` (pipe)\n\nWe talked earlier about command line expressions having 3 parts -- the command itself, options and arguments, and output. By default, any output is printed to the screen. That's what we've seen so far. But you can also **redirect the output**, and there are three primary ways to redirect it...\n\n  - With `>`, which is followed by the name of a text file the output will be written to\n  - With  `>>`, which is simlar to `>` but will **append** the output\n    (that is, it won't overwrite any existing content like `>`)\n  - With  `|` (pipe), which takes the output of one command and \"pipes\" it as input for a subsequent command.\n  \nLet's try to preview the contents of one of the compressed files. \n\n### `head`\n\nThe `head` command is a great way to preview the contents of a text file. By default, `head` prints the first 10 lines of a file. Since these are FASTQ files, let's print 8 lines (a multiple of 4 -- it will become clear why shortly). We can use the `-n` argument to specify the number of lines that  will be returned.\n\n  <p align=\"left\">\n  <img src=img/head1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/head2.png width=\"80%\">\n  </p>\n\nThis isn't what we want -- we're seeing the first 8 lines of the compressed files - not helpful. \n\n### `zcat`\n\nThe `zcat` function prints human-readable contents of a gzip-compressed file to the screen. We can try running it on the file, but remember the file is pretty big -- there are lots of lines of text in there that will all get printed to the screen. Instead, we can pipe the output of `zcat` to the `head` command.\n\n  <p align=\"left\">\n  <img src=img/head3.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/head4.png width=\"80%\">\n  </p>\n\nMuch better -- this is what the raw RNAseq data look like!\n\n:::{.callout-warning}\nTo get the number of lines (= number sequences x 4 -- see below)\nfor a gzipped FASTQ file,\nit's important to use  `zcat x.fastq.gz | wc -l` instead of `wc -l x.fastq.gz`,\nbecause the compressed file does not have the same number of lines!\n:::\n\n### FASTQ Format\n\nIf you're not familiar with it, FASTQ is a very common format for genomic data files. The raw data produced by a high-throughput sequencer will almost certainly be returned to you in this format. These are plain text files, and each sequence that is read by the sequencer is represented by 4 lines:\n\n  - a name (header) line\n  - the sequence itself\n  - a plus sign\n  - quality scores corresponding to each base position in the sequence\n\n### `wc`\n\nSince each read in a FASTQ file is represented by 4 lines, we should expect the number of lines in each of the FASTQ files to be a multiple of 4. Let's check one. The `wc` command stands for word count, but by default, it returns the number of words, lines, and characters in a file. The `-l` option tells it to return just the number of lines, so we'll use it since that's all we're interested in right now. And remember, we'll want to do this on the uncompressed data.\n\n\n  <p align=\"left\">\n  <img src=img/wc1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/wc2.png width=\"80%\">\n  </p>  \n\n### `grep`\n\n`grep` allows you to search through a file for specific patterns of text and returns the matching lines. For example, let's say we wanted to see what sequences in sample SRR7609467 contain the sequence \"ACCGATACG\":\n\n  <p align=\"left\">\n  <img src=img/grep1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/grep2.png width=\"80%\">\n  </p>  \n  \n:::{.exercise}\n#### On Your Own: Finding a Sequence {-}\n\nHow many sequences in sample SRR7609467 contain the sequence \"CCAGTA\"?\n\n<details><summary>\nHint (click here)\n</summary>\n\nPipe the results of the grep to `wc -l`. Alternatively, check out the `-c` option to grep in the `man` page.\n</details>\n  \n<details><summary>\nSolutions (click here)\n</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat SRR7609467.fastq.gz | grep 'CCAGTA' | wc -l\n```\n:::\n\n\n**OR**\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat SRR7609467.fastq.gz | grep -c 'CCAGTA'\n```\n:::\n\n\n</details>\n:::   \n\n<br>\n\n## Downloading Files from the Web\n\nAt command line, you can't just open a web browser and download a file you might want. But of course, there are commands to do that. As we move toward starting to analyze our example RNAseq dataset, one thing we'll need is the reference genome for the species these sequences came from -- in this case, *Phaseolus vulgaris*. Before we get that, it's another good time to practice some of those common commands...\n\n:::{.exercise}\n#### On Your Own: Create a Directory {-}\n\nCreate a new (empty) directory named `reference` that will later store the reference genome for our analyses. Put it in your own directory inside `participants`. Then make this `reference` directory your working directory.\n\n<details><summary>\nHint (click here)\n</summary>\n\nUse the `mkdir` command (and `cd` as necessary). Remember that `..` moves you up/back one directory, and these can be combined. For example, `../../../` would move you up/back 3 directories.\n\n</details>\n  \n<details><summary>\nSolution (click here)\n</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir ../../reference\n  \ncd ../../reference\n```\n:::\n\n\n**OR**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../../\n  \nmkdir reference\n   \ncd reference\n```\n:::\n\n\n</details>\n:::\n\n### `curl`\n\n`curl` is one command that allows you to download files from online (`wget` is another). Technically, all you need for `curl` is the name of the command and the web address for what you want to download.\n\nHowever, the default for `curl` is to print the downloaded contents to the screen. This usually isn't what we want. Instead, we want to save them to a file. One option would be to redirect the output to a text file with `>`. But `curl` also has a built-in option to write the contents to a file: `-o`, so we'll use that.\n\nSince the file that gets downloaded is a gzip-compressed, FASTA-formatted text file, we'll give the name of the file a `.fa.gz` extension. The reference genome for *Phaseolus vulgaris* is available at:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/499/845/GCF_000499845.1_PhaVulg1_0/GCF_000499845.1_PhaVulg1_0_genomic.fna.gz\n```\n:::\n\n\n  <p align=\"left\">\n  <img src=img/curl1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/curl2.png width=\"80%\">\n  </p>  \n\n:::{.exercise}\n#### On Your Own: Preview a FASTA file {-}\n\nTry previewing the contents of the reference genome file you just downloaded.\n\n<details><summary>\nHint (click here)\n</summary>\nRemember the file is gzip-compressed. Use `zcat` and pipe the results to `head`.\n</details>\n  \n<details><summary>\nSolution (click here)\n</summary>\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzcat Pvulg.fa.gz | head\n```\n:::\n\n\n</details>\n:::\n\nOK, now we've got our raw data (FASTQ) and our reference genome (FASTA). This is a good start in terms of getting ready to start analyzing the data. One more thing we can do now is try to understand a little bit about the samples themselves. There is a tab-separated text file named `meta.tsv` in the `data/meta` directory. Let's take a look at its contents...\n\n### `less`\n\n`less` is a command that opens up a text file within your shell. Once you're finished viewing the file, type <kbd>q</kbd> to quit and return to your prompt.\n\n\n  <p align=\"left\">\n  <img src=img/meta1.png width=\"80%\">\n  </p>\n  \n  <p align=\"left\">\n  <img src=img/meta2.png width=\"80%\">\n  </p>  \n\n  <p align=\"left\">\n  <img src=img/meta3.png width=\"80%\">\n  </p>  \n\n## Further resources\n\n- https://www.learnenough.com/command-line-tutorial\n- https://cvw.cac.cornell.edu/Linux/\n- http://www.ee.surrey.ac.uk/Teaching/Unix/\n- https://www.udacity.com/course/linux-command-line-basics--ud595\n- http://moo.nac.uci.edu/~hjm/How_Programs_Work_On_Linux.html\n- [OSC's UNIX Basics](https://www.osc.edu/documentation/tutorials/unix_basics)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}