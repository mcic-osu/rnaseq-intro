{
  "hash": "559b08815d585e3a59b4a686a091c7b6",
  "result": {
    "markdown": "---\ntitle: \"Genomic data files & data downloading\"\nsubtitle: \"And exploring them in the shell, including with `grep`, `cut`, `sort`, `uniq`\"\npagetitle: \"Genomic data files\"\nhighlight-style: github\nnumber-sections: true\nengine: knitr\nauthor: Jelmer Poelstra\ndate: 2023-08-11\n---\n\n::: {.cell}\n\n:::\n\n\n-------\n\n<br>\n\n## Overview & Getting started\n\nIn this session, you'll be introduced to three very common types of genomic data\nfiles, all of which you should have _when you start_ your reference-based RNAseq\ndata analysis.\n\nYou'll also learn a number of new shell concepts and commands,\nsuch as commands to work with gzip-compressed files,\n`grep` to search for text,\n`cut`, `sort`, and `uniq` to summarize tabular data,\nand `wget` to download files from the internet\n(and the at-home reading describes `md5sum` to check data integrity,\nand `chmod` to make your valuable data read-only.)\n\nWe'll talk about the following three types of genomic data file:\n\n- **FASTQ** files:\n  When you get your sequence data back, it will be in this format,\n  which contains one entry per read,\n  and has _quality scores along with the sequence itself_.\n- **FASTA** files:\n  These are very simple sequence files, where each entry is just\n  a header and a DNA or protein sequence.\n  Your reference genome assembly will be in this format.\n- **GTF** (& **GFF**) files:\n  These are files that contain annotations in a tabular format,\n  such as the start and stop positions of each gene.\n\nYou already have some FASTQ files in your practice directory\n(if not, see the instructions below),\nbut we do not yet have the reference genome FASTA and GFF files\nand will download those in this session.\n\n### Start VS Code and open your folder {-}\n\nAs always, we'll be working in VS Code &mdash;\nif you don't already have a session open, see below how to do so.\n\n**Make sure to open your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir**,\neither by using the `Open Folder` menu item,\nor by clicking on this dir when it appears in the `Welcome` tab.\n\n:::{.callout-tip collapse=\"true\"}\n## Starting VS Code at OSC - with a Terminal (Click to expand)\n1. Log in to OSC's OnDemand portal at <https://ondemand.osc.edu>.\n2. In the blue top bar, select `Interactive Apps`\n   and then near the bottom of the dropdown menu, click `Code Server`.\n3. In the form that appears on a new page:\n   - Select an appropriate OSC project (here: `PAS0471`)\n   - For this session, select `/fs/ess/PAS0471` as the starting directory\n   - Make sure that `Number of hours` is at least `2`\n   - Click `Launch`.\n4. On the next page, once the top bar of the box has turned green\n   and says `Runnning`, click `Connect to VS Code`.\n\n<figure><p align=\"center\"><img src=img/osc-code-launch_ed.png width=\"80%\"></p></figure>\n\n5. Open a Terminal by clicking\n   &nbsp; {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.\n   (Or use one of the keyboard shortcuts:\n   <kbd>Ctrl</kbd>+<kbd>\\`</kbd> (backtick) or\n   <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>.)\n6. In the `Welcome` tab under `Recent`,\n   you should see your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir listed:\n   click on that.\n   Alternatively, use\n   &nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`\n   to open that dir in VS Code.\n:::\n\n:::{.callout-warning collapse=\"true\"}\n#### Don't have your own dir with (e.g.) FASTQ files? (Click to expand)\nIf you missed the last session, or deleted your `rnaseq_intro` dir entirely,\nrun these commands to get a (fresh) copy of all files:\n\n```bash\nmkdir -p /fs/ess/PAS0471/$USER/rnaseq_intro\ncp -r /fs/ess/PAS0471/demo/202307_rnaseq /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nAnd if you do have an `rnaseq_intro` dir,\nbut you want to start over because you moved or removed some of the files\nwhile practicing, then delete the dir before your run the commands above:\n\n```bash\nrm -r /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n:::\n\n<br>\n\n## FASTQ, compressed files, & `grep`\n\n### The FASTQ format\n\nFASTQ is a very common format for the raw sequence data output by high-throughput\nmachines &mdash;\nat least when you have Illumina sequencing done,\nyou will almost always receive the sequences in this format.\n_Like most genomic data files, these are plain text files_,\nand each sequence that is read by the sequencer (i.e., each \"read\")\nforms **one FASTQ entry which is represented by four lines**.\nThe lines contain, respectively:\n\n1. A **header** that starts with `@` and e.g. uniquely identifies the read\n2. The **sequence** itself\n3. A **`+`** (plus sign)\n4. One-character **quality scores** for each base in the sequence\n\n<figure><p align=\"center\">\n<img src=img/fastq_header.png width=\"85%\">\n<figcaption>One entry (read) in a FASTQ file covers 4 lines. <br>Several components of the header line are annotated.</figcaption>\n</p></figure>\n\nThe \"Q\" in FASTQ stands for \"_quality_\", to contrast this file type with FASTA,\na more basic and generic format that does not include base quality scores.\nFASTQ files have the extension `.fastq` or `.fq`,\nbut they are very commonly gzip-compressed,\nin which case their name ends in `.fastq.gz` or `.fq.gz`.\n\n::: {.callout-note collapse=\"true\"}\n#### Understanding FASTQ quality scores (Click to expand)\n\nThe bottom line (starting with `JJJJ`) in the figure above contains a\nquality score for each base of the sequence in the second line.\nSpecifically, this is a Phred quality score (Q), defined as:\n\n>    **Q = -10 * log10(P)**\n\nIn the equation above, P is the estimated probability that a base call is\nerroneous &mdash;\nsee the table below for some specific probabilities and their rough qualitative\ninterpretation for Illumina data:\n\n| Phred quality score   | Error probability   | Rough interpretation |\n|-----------|-----------|-----------| \n| **10**    | 1 in 10      | terrible  |\n| **20**    | 1 in 100     | bad       |\n| **30**    | 1 in 1,000   | good      |\n| **40**    | 1 in 10,000  | excellent |\n\nWith Illumina data, these Phred quality scores can go up to 62.\nThis numeric quality score is represented in FASTQ files not by its number,\nbut by an \"ASCII character\",\nwhich **allows for a single-character representation** of each possible score.\n\nAs a consequence, each quality score character can conveniently correspond to \n(i.e., line up with) a base in the sequence:\ne.g., the 30th base number in a FASTQ line with a DNA sequence will correspond\nto the 30th quality score character in that line.\n  \nIn practice, you almost never have to check the individual quality scores of bases\nin FASTQ files,\nbut if you do want to know which character corresponds to which quality,\n[this Illumina webpage has a table](https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/QualityScoreEncoding_swBS.htm).\n\n:::\n\nIllumina sequencing is by far the most common for RNAseq[^1],\nand can be done in two \"modes\": **_single-end_** and **_paired-end_**.\nWith paired-end sequencing, each individual (c)DNA fragment is sequenced from two\nends in opposite directions \n(with the total size of the fragment &ndash;\"insert size\"&ndash;\ndetermining whether these two reads will overlap).\nThe resulting two, \"paired\", reads for each fragment are inextricably linked,\nwith the first called the **forward read** and the second called the\n**reverse read**.\n\n<figure><p align=\"center\">\n<img src=img/forward-reverse-reads.png width=\"85%\">\n<figcaption>How a DNA fragment prepared for paired-end Illumina sequencing will be sequenced. <br>In this example, the insert size is such that the forward and reverse reads do not overlap.</figcaption>\n</p></figure>\n\nMost commonly for paired-end data,\nforward and reverse reads are placed in separate files[^2].\nAs such, you'll usually have two files[^3] for each sample that was sequenced:\n\n- The file with **forward reads has `_R1`** (or sometimes `_1`) in its name,\n  e.g. `ASPC1_A178V_R1.fastq.gz`\n- The file with **reverse reads has `_R2`** (or sometimes `_2`) in its name,\n  e.g. `ASPC1_A178V_R2.fastq.gz`\n  (i.e., the name should be identical to that for the forward read,\n  except for the read direction identifier).\n  \nBecause the forward and reverse reads are so tightly linked,\nR1 and R2 files for one sample _should always contain the same number of reads_.\n(It is possible to end up with \"orphan\" reads,\nsuch as after one member of the pair is removed by quality filtering,\nbut these are either discarded or saved in separate files.)\n\n[^1]: Though long-read technologies like Oxford Nanopore Technologies and especially\n      PacBio are picking up steam, since these can sequence transcripts _in full_.\n\n[^2]: These two files _can_ be merged and the resulting FASTQ format\n      is called \"interleaved\", but this is not very common practice.\n\n[^3]: In some cases, most often when you simply do a lot of sequencing for each\n      sample, you'll get more than one pair of files:\n      one pair for each \"lane\" of the sequencer on which the sample was sequenced.\n\n<br>\n\n### Looking at compressed (FASTQ) files\n\nLet's start by reminding ourselves about our own FASTQ files &mdash;\nrecall that this is a subset of the full dataset,\nwith way fewer reads reads per file than the originals,\nand with files for only four of the samples: \n\n```bash\nls -lh data/fastq\n```\n```{.bash-out}\ntotal 38M\n-rw-r--r-- 1 jelmer PAS0471 4.1M Jul 27 11:53 ASPC1_A178V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.2M Jul 27 11:53 ASPC1_A178V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.1M Jul 27 11:53 ASPC1_G31V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.3M Jul 27 11:53 ASPC1_G31V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.1M Jul 27 11:53 Miapaca2_A178V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.3M Jul 27 11:53 Miapaca2_A178V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.1M Jul 27 11:53 Miapaca2_G31V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.3M Jul 27 11:53 Miapaca2_G31V_R2.fastq.gz\n```\n\nThe FASTQ files all have a `.gz` extension (and are listed in red),\nindicating they are \"gzip-compressed\".\nThis is a common type of compression for large genomic files.\n\nNext, we'll take a peak inside one of these files.\nI should note that during actual FASTQ analysis (QC, trimming, alignment),\nyou never _have to_ interact with or know the details of the raw contents of the\nfile, since we will use bioinformatics programs that take care of this for us.\nThat said, it is good to at least have a rough idea what a FASTQ file looks like,\nand how you might get some quick stats on them using basic shell commands.\n\nLet's consider our options look inside one of these files.\n`cat` will print the contents of the entire file to screen,\nwhich doesn't sound like a good idea for such a large file.\nOther than `less`, perhaps `head` will work well here?\nWe'll try to print 8 lines, which should show us two reads:\n\n```bash\nhead -n 8 data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n  \n<p align=\"left\"><img src=img/head2.png width=\"80%\"></p>\n\nOuch, what was that?!\nWhat happened here is that we are directly seeing the contents of the\n_compressed_ file, which is simply not human-readable.\n\nOther shell commands, like those that count the number of lines (`wc -l`),\nor search for text (`grep`, see below), would also run into trouble &mdash;\nand in a possibly worse way because you might overlook the problem:\n`wc -l` _will_ return a count\nyet this is not the number of lines for the uncompressed file,\nwhereas a text search may \"falsely\" return nothing while that text _is_ present\nin the uncompressed file.\n\nTo get around all of this,\nwe might be inclined to **uncompress** these files,\nwhich we could do with the **`gunzip` command**.\nHowever, uncompressed files take up several times as much disk storage space as\ncompressed ones, and this can add up to a lot when we're talking about FASTQ files.\nFortunately, there are other approaches available.\nFirst of all, any bioinformatics tool worth its salt will accept compressed\nFASTQ files.\nAdditionally, the following commands and strategies should help you to do some\nbasic exploration of your FASTQ files without uncompressing them.\n\n\n::: {.callout-note collapse=\"true\"}\n#### Concatenating compressed data\n\nWhen it is okay to concatenate files\n(losing information about the original file origin of the data),\nthis can be done very easily in the shell.\n\nParticularly useful is the following,\nfor instance if we have two gzipped FASTQ file for the same sample but from\ndifferent Illumina lanes:\n\n```bash\ncat sampleA_L001_R1.fastq.gz sampleA_L002_R1.fastq.gz > sampleA_R1.fastq.gz\n```\n\nOr, to add a second FASTQ file to an existing gzipped file,\nwe can simply use `>>`:\n\n```bash\n# Fictional example, say we a compressed FASTQ and a second uncompressed one:\nls\n#> in.fastq.gz in2.fastq\ngzip -c in2.fastq >> in.fastq.gz\n```\n:::\n\n#### `less` / `zless`\n\nAs you may recall from the previous session,\nwe were actually able to directly view a compressed FASTQ file with `less`!\n`less` also has a `zless` counterpart that is explicitly meant to display\ngzip-compressed files, but at least at OSC, `less` itself will also work:\n\n```bash\nless data/fastq/ASPC1_A178V_R1.fastq.gz\n# (Recall, press 'q' to quit less)\n```\n\n::: {.callout-note}\n#### Avoid line-wrapping by `less`\n\nDepending on your zoom level and the length of reads in your FASTQ file,\nsome lines may contain too many characters to fit on your screen.\nIf that's the case, \n`less` will by default \"wrap\" those lines onto the next line on your screen,\nso characters won't run off the screen on the right-hand side. \nThat may be useful when the file contains text you're trying to read in full,\nbut it is often confusing for files like FASTQ as well as for tabular files.\n\nTo turn off line-wrapping, call `less` with the `-S` option:\n\n```bash\nless -S data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n:::\n\n#### `zcat` (and `grep`)\n\nLike the `less`/`zless` pair,\n`cat` has a counterpart that will print the uncompressed contents of a compressed\nfile: **`zcat`**.\n\nOf course, we just established that `cat`'s behavior of printing all the contents\nof a file isn't great for large FASTQ files.\nBut `zcat` is nevertheless very useful for FASTQ files \nwhen we combine it with the pipe, `|`.\n\nFor example, we can pipe the output of `zcat` to the `head` command to view\nthe first 8 lines as follows:\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | head -n 8\n```\n```{.bash-out}\n@A00195:432:HC7JWDRX3:2:1241:25093:24627 1:N:0:CCGATCGT+GACTGTTT\nGAACTAACCAAAGTGTGCTGAACATTATTAGGCTCTCCAGACATGTCTAGTTTATACTGGTAAATGCATATCAATTGTAAATATAAAAATAAAATTTGCAT\n+\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFF:FFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFF:F:F,F:FF\n@A00195:432:HC7JWDRX3:1:1232:30716:27226 1:N:0:CCGATCGT+GACTGTTT\nGTCCGGACCTTCTTGACGTAAGTGACATCTGGGTGGTGTTTGGGCGGCATGAGCAGCAGATGCAGCCGCTCATAGAACTGGATCCCGTTAAGGGAGGTGAC\n+\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n```\n\nAlong the same lines, we can count the number of lines in a FASTQ file like so:\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | wc -l\n```\n```{.bash-out}\n400000\n```\n\n::: {.exercise}\n#### Your Turn: The number of reads in a FASTQ file\n\n- How many reads are in the above FASTQ file?\n\n- What line count do you get when you run `wc -l` directly on the compressed file? \n\n<details><summary>Solutions</summary>\n\n- There are 400,000 / 4 = 100,000 reads in this file\n\n- You'll get a line count of 15,358, quite a ways off from the 400,000 lines\n  in the uncompressed file! So, don't do this when you want to count lines/reads!\n\n```bash\nwc -l data/fastq/ASPC1_A178V_R1.fastq.gz \n```\n```{.bash-out}\n15358 data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n</details>\n:::\n\n::: {.exercise}\n#### Your Turn: Getting the read length (advanced)\n\nWhat is the read length for these FASTQ files?\nCan you get the answer using the commands we have covered so far?\n\n_Two extra pieces of information:_\n\n- _`wc -c` will return the number of characters in its input._\n- _Nearly all reads in Illumina FASTQ files have the same length,_\n  _so you can examine the length of a single read to get your answer._\n\n<details><summary>Hints</summary>\n\n- Recall that the number of characters in e.g. the second (and the fourth) line\n  of a FASTQ file corresponds to the read length.\n\n- Think about how you might be able to use `head` and `tail`,\n  each with the `-n` option, and back-to-back,\n  to get a specific line from a file.\n\n- String all four commands together in a single line using the pipe `|`.\n\n</details>\n\n<details><summary>Solution</summary>\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | head -n 2 | tail -n 1 | wc -l\n```\n```{.bash-out}\n102\n```\n\nYou can extract any line from a text file by its line number `N` using\n`head -n N | tail -n 1`:\nthe last line from `head`'s output will be the line of interest,\nwhich you can then isolate with `tail -n 1`. \n\nOne (annoying) little twist here is that `wc -c` will include the newline\n\"character\" in its count: as such, the read length is 102 - 1 = **101**.\n\n</details>\n:::\n\n-----\n\n**`grep` allows you to search a file for any text or text patterns.**\nBy default, it will _return the entire line_ whenever it finds a match,\nand it is often set up (including at OSC) to\n_highlight the matching text itself_ in bold red in its output.\n\nFor example, let's say we wanted to see which reads in our FASTQ file contain\nthe sequence \"ACCGATACG\":\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | grep \"ACCGATACG\"\n```\n\n<p align=\"left\"><img src=img/grep_on_fastq.png width=\"98%\"></p>  \n\nIf we wanted to know _how many_ reads contain a certain sequence\n(e.g, the shorter and therefore more common \"CCAGTA\"),\nwe can simply pipe `grep`'s output into `wc -l`:\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | grep \"CCAGTA\" | wc -l\n```\n```{.bash-out}\n1118\n```\n\n::: {.callout-note}\n#### More `grep`\n\n`grep` has _many_ options &mdash; one of those is `-c`,\nwhich will directly _count_ matching lines instead of printing them\n(i.e., the command below is an alternative to the command above where we piped\n`grep`s output into `wc -l`):\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | grep -c \"CCAGTA\"\n```\n```{.bash-out}\n1118\n```\n\n`grep` even has a `zgrep` counterpart for gzip-compressed files,\nso the above can be further shortened by omitting `zcat` and passing the FASTQ\nfile name as an argument to `zgrep`:\n\n```bash\nzgrep -c \"CCAGTA\" data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n```{.bash-out}\n1118\n```\n\nWe could also create a new FASTQ file whose sequences match our search by\nprinting one line before each match (`-B1`) and two lines after it (`-A2`):\n\n```bash\nzgrep -B1 -A2 --no-group-separator \"CCAGTA\" data/fastq/ASPC1_A178V_R1.fastq.gz > CCAGTA.fastq \n```\n\n`grep` can also search multiple files at once\n(simply pass multiple filenames as arguments like with other commands,\ne.g. using a glob pattern to select them),\nand it can even search directories recursively using the `-R` flag.\n\n:::\n\n<br>\n\n## Downloading reference genome files\n\n### Finding genome files at NCBI\n\nTo analyze our RNAseq data,\nwe'll need two files related to our **reference genome**,\nwhich is the genome that we want to align our reads to,\nand whose gene annotations will form the basis of the gene counts that we'll get.\n\nSpecifically, we'll need the **nucleotide FASTA** file with the genome assembly itself,\nand a **GTF file**,\nwhich is a tabular file with the genomic coordinates and other information for genes\nand other so-called genomic \"features\".\n\nWe can download these files from NCBI.\nFor human, many genome assemblies are available on NCBI,\nbut the current reference genome is \"_GRCh38.p14_\" \n([see this overview](https://www.ncbi.nlm.nih.gov/datasets/genome/?taxon=9606)).\nThere are several ways to download genomes from the NCBI &mdash;\nhere, we will keep it simple and directly download just the two files that we\nneed from the [FTP site for this genome](https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/).\n\n::: {.callout-note}\n#### Getting to the FTP site\nYou can get to this FTP site by clicking on the link for \"GRCh38.p14\" on the\n[overview page](https://www.ncbi.nlm.nih.gov/datasets/genome/?taxon=9606),\nwhich will bring you [here](https://www.ncbi.nlm.nih.gov/datasets/genome/GCF_000001405.40/),\nthen clicking on \"View the legacy Assembly page\",\nwhich will bring you [here](https://www.ncbi.nlm.nih.gov/assembly/GCF_000001405.40/?shouldredirect=false),\nand then clicking on \"FTP directory for RefSeq assembly\" on the right-hand side\nof the page.\n:::\n\nOn the [FTP site](https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/),\nwe can first right-click on \n\"GCF_000001405.40_GRCh38.p14_genomic.fna.gz\" and then click \"Copy link address.\"\n(The URL is also shown in the command box below.)\n\n<br>\n\n### Downloading files to OSC with `wget`\n\nTo download a file to OSC,\nyou can't just open a web browser and download it directly to there.\nYou _could_ download it to your own computer and then transfer it to OSC.\nA more direct approach is to use a download command in your OSC shell.\n**`wget` is one command that allows you to download files from the web**\n(`curl` is another very commonly used one, with much the same functionality).\n\n**To download a file to your working directory**,\nyou just need to tell `wget` about the URL (web address) to that file &mdash;\ntype \"wget\", press <kbd>Space</kbd>, and paste the address you copied:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.fna.gz\n```\n:::\n\n```{.bash-out}\n--2023-08-08 13:46:35--  https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.fna.gz\nResolving ftp.ncbi.nlm.nih.gov (ftp.ncbi.nlm.nih.gov)... 130.14.250.11, 130.14.250.10, 2607:f220:41e:250::12, ...\nConnecting to ftp.ncbi.nlm.nih.gov (ftp.ncbi.nlm.nih.gov)|130.14.250.11|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 972898531 (928M) [application/x-gzip]\nSaving to: ‘GCF_000001405.40_GRCh38.p14_genomic.fna.gz’\n65% [============================================================================================>                                                   ] 633,806,848 97.7MB/s \n```\n\nThe `wget` command is quite chatty,\nas you can see above and as you should see in your shell when you execute the command,\nand its output to the screen includes a progress bar for the download.\n\nNext, let's download one of the annotation files.\nOn the NCBI genome assembly FTP page, both a GFF and a GTF file is available.\nThese are two very similar formats that contain the same data.\nFor our specific analysis workflow, the GTF format is preferred,\nso we will download the GTF file &mdash;\nright-click on \"GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\" and copy the link\naddress.\n\n```bash\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\n# (Command output not shown)\n```\n\nNext, let's see if the files are indeed in our current working dir:\n\n```bash\nls -lh \n```\n```{.bash-out}\n# Output should include:\n-rw-r--r-- 1 jelmer PAS0471 928M Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.fna.gz\n-rw-r--r-- 1 jelmer PAS0471  49M Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\n```\n\n<br>\n\n### Unzipping and renaming the genome files\n\nBoth the FASTA and the GTF file are gzip-compressed.\nWhile it's preferable to keep FASTQ files compressed,\nsince they are especially large and there are typically many of them,\nit's often more convenient to store your reference genome files as uncompressed\nfiles.\n\nWe can unzip them simply as follows\n(notice the subsequent increase in file size in the `ls` output):\n\n```bash\n# Will take several seconds, esp. for the first file, and not print output to screen\ngunzip GCF_000001405.40_GRCh38.p14_genomic.fna.gz\ngunzip GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\n\nls -lh\n```\n```{.bash-out}\n# Output should include:\n-rw-r--r-- 1 jelmer PAS0471 3.2G Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.fna\n-rw-r--r-- 1 jelmer PAS0471 1.6G Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.gtf\n```\n\nWe'll also want to move these files to a dedicated directory.\nAnd while this is not necessary,\nit will be convenient for our purposes to shorten their file names while\nretaining the necessary identifying information (the RefSeq (GCF) number).\n\nAfter creating a directory, we can move and rename at once as follows:\n\n```bash\nmkdir -p data/ref\nmv -v GCF_000001405.40_GRCh38.p14_genomic.fna data/ref/GCF_000001405.40.fna\nmv -v GCF_000001405.40_GRCh38.p14_genomic.gtf data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n‘GCF_000001405.40_GRCh38.p14_genomic.fna’ -> ‘data/ref/GCF_000001405.40.fna’\n‘GCF_000001405.40_GRCh38.p14_genomic.gtf’ -> ‘data/ref/GCF_000001405.40.gtf’\n```\n\n<br>\n\n## FASTA\n\nOur reference genome assembly is stored in the FASTA format,\nso we'll learn more about this format and take a look at our own file.\n\n### The FASTA format\n\nThe FASTA format is in essence simpler than FASTQ,\nbut it is also less standardized and more generic.\n\n```{.bash-out-solo}\n>unique_sequence_ID Optional description (free form!)\nATTCATTAAAGCAGTTTATTGGCTTAATGTACATCAGTGAAATCATAAATGCTAAAAA\n>unique_sequence_ID2\nATTCATTAAAGCAGTTTATTGGCTTAATGTACATCAGTGAAATCATAAATGCTAAATG\n```\n\nLike FASTQ files, each entry contains a **header** and the **sequence** itself, but:\n\n- **Header lines start with a `>`**, and are otherwise basically \"free form\",\n  but they usually provide some sort of identifier (and sometimes some metadata)\n  for the sequence in the entry. \n- There are no quality scores, and there is no `+` line.\n- The sequences can be DNA, RNA, or amino acids.\n- Each sequence can represent e.g. a read, a contig/scaffold, a chromosome,\n  or a gene, as well as an _aligned_ sequence with gaps in it. \n- Because the individual sequences in a FASTA file can be very long,\n  **sequences are often not on a single line**,\n  but may be spread across multiple/many lines with some fixed width,\n  say 50 or 80 characters. (As such, line counts are not that informative.)\n\n_Generic_ FASTA file extensions are `.fasta` and `.fa`,\nbut also used are extensions that explicitly indicate whether the sequences are\n_nucleotides_ (`.fna`, like our downloaded genome assembly file)\nor _amino acids_ (`.faa`).\n\n<br>\n\n### Exploring our FASTA file\n \nLet's take a look at our reference genome nucleotide FASTA file:\n\n```bash\nhead data/ref/GCF_000001405.40.fna\n```\n```{.bash-out}\n>NC_000001.11 Homo sapiens chromosome 1, GRCh38.p14 Primary Assembly\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n```\n\nWell ... apparently not all bases have been determined:\nas you probably know, an `N` represents an unknown base.\nWe can also see that the sequence for each entry is spread across multiple lines,\nwith a line width of 80 characters:\n\n```bash\nhead -n 2 data/ref/GCF_000001405.40.fna | tail -n 1 | wc -c\n```\n```{.bash-out}\n81              # 81 - 1 = 80 characters\n```\n\nLet's take a more extensive look at the file with `less`:\n\n```bash\nless data/ref/GCF_000001405.40.fna\n# (Remember: press 'q' to quit less)\n```\n\nFinally, we can check how many sequences we have in this file by\nsimply counting the number of lines with a `>` (which is only allowed in the headers):\n\n```bash\n# (This will take several seconds)\ngrep -c \">\" data/ref/GCF_000001405.40.fna\n```\n```{.bash-out}\n705\n```\n\nDoes this match with what the NCBI website told us?\n\n<br>\n\n## Annotation files (GTF/GFF) & `cut`/`sort`/`uniq`\n\nOur reference genome _annotation_ is stored in the GTF format,\nso we'll also learn more about this format and take a look at our own file.\n\n### The GTF format\n\nThe GTF format and the _very_ similar GFF format[^5]\nare **tabular** files,\nwith one row for each individual \"genomic feature\"\n(gene, exon, intron, etc.)\nthat has been annotated in the genome,\nand with columns that contain information like the genomic coordinates of the \nfeatures.\n\n[^5]: In fact, GTF is identical to GFF v2.\n      But the current GFF version is the slightly different GFF v3,\n      which sometimes has the extension `.gff3` to make that clear.\n\nSee the small sample below, where a header line with column names has been\nmanually added for educational purposes:\n\n```{.bash-out-solo}\nseqname     source  feature start   end     score  strand  frame    attributes\nNC_000001   RefSeq  gene    11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"\"; db_xref \"GeneID:100287102\"; db_xref \"HGNC:HGNC:37102\"; description \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; gbkey \"Gene\"; gene \"DDX11L1\"; gene_biotype \"transcribed_pseudogene\"; pseudo \"true\"; \nNC_000001   RefSeq  exon    11874   12227   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; \n```\n\nHere are some more details on what's in each column,\nwith the more important/interesting columns in bold:\n\n- **_seqname_** &mdash; Name (ID) of the chromosome, scaffold, or contig\n- _source_ &mdash; Name of the program that generated this feature, or the data source (database or project name)\n- **_feature_** &mdash; Name of the feature type name, e.g. gene, exon, intron, CDS\n- **_start_** &mdash; Start position of the feature (with sequence numbering starting at 1)\n- **_end_** &mdash; End position of the feature (with sequence numbering starting at 1)\n- _score_ &mdash; A confidence score for the feature, often absent (`.`)\n- **_strand_** &mdash; Whether the feature is on the `+` (forward) or `-` (reverse) strand\n- _frame_ &mdash; `0`, `1` or `2` (or `.` for no frame). `0` means the 1st base of the feature is the 1st base of a codon, etc.\n- **_attribute_** &mdash; A semicolon-separated list of tag-value pairs with additional information about each feature.\n\nThey also contain a **header section**,\nwhose lines start with a `#` and contain some metadata for the file.\n\n::: {.callout-warning}\nBecause GTF/GFF files contain genomic coordinates,\nit is key that the FASTA and GTF/GFF you are working with correspond to the same\nassembly.\nFor example, if you want to use an updated assembly FASTA for your focal genome,\nyou're going to need an updated annotion file as well.\nOn the other hand, it is possible to update just the annotation for the same\nassembly.\n:::\n\n### Exploring our GTF file\n\nLet's take a look at the first lines of the file with `head`,\nwhich will show us there are five header lines,\nfollowed by the tabular part of the file:\n\n```bash\nhead data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n#gtf-version 2.2\n#!genome-build GRCh38.p14\n#!genome-build-accession NCBI_Assembly:GCF_000001405.40\n#!annotation-date 03/15/2023\n#!annotation-source NCBI RefSeq GCF_000001405.40-RS_2023_03\nNC_000001.11    BestRefSeq      gene    11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"\"; db_xref \"GeneID:100287102\"; db_xref \"HGNC:HGNC:37102\"; description \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; gbkey \"Gene\"; gene \"DDX11L1\"; gene_biotype \"transcribed_pseudogene\"; pseudo \"true\"; \nNC_000001.11    BestRefSeq      transcript      11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gbkey \"misc_RNA\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; \nNC_000001.11    BestRefSeq      exon    11874   12227   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"1\"; \nNC_000001.11    BestRefSeq      exon    12613   12721   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"2\"; \nNC_000001.11    BestRefSeq      exon    13221   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"3\"; \n```\n\nThe final column (\"attributes\") contains lots of data so the line width will almost\ncertainly exceed your screen width,\nand the output you should see in your shell will be line-wrapped.\n\nIt's easier to see what's going on on this website,\nwhere we get one line for each line of the file and can scroll sideways,\nor with `less -S`:\n\n```bash\nless -S data/ref/GCF_000001405.40.gtf\n```\n\n------\n\nOne nice trick for if we only want to see the tabular lines\n(for some files, the header can be quite long),\nor if we wanted to summarize the data in the tabular lines,\nis to **omit the header lines using `grep -v`**.\nThe `-v` option will invert `grep`'s behavior and only print **non-matching** lines\n&mdash; since only the header lines contain a `#`,\nwe can use that as the pattern to search for: \n\n```bash\ngrep -v \"#\" data/ref/GCF_000001405.40.gtf | head -n 3\n```\n```{.bash-out}\nNC_000001.11    BestRefSeq      gene    11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"\"; db_xref \"GeneID:100287102\"; db_xref \"HGNC:HGNC:37102\"; description \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; gbkey \"Gene\"; gene \"DDX11L1\"; gene_biotype \"transcribed_pseudogene\"; pseudo \"true\"; \nNC_000001.11    BestRefSeq      transcript      11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gbkey \"misc_RNA\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; \nNC_000001.11    BestRefSeq      exon    11874   12227   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"1\";\n```\n\n```bash\ngrep -cv \"#\" data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n4684284\n```\n\nSo, there are 4,684,284 annotated features in this file.\n\n-----\n\nLet's see if we can find a gene of interest, \"RASD1\" in this annotation:\n\n```bash\ngrep \"RASD1\" data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\nNC_000017.11    BestRefSeq      gene    17494437        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"\"; db_xref \"GeneID:51655\"; db_xref \"HGNC:HGNC:15828\"; db_xref \"MIM:605550\"; description \"ras related dexamethasone induced 1\"; gbkey \"Gene\"; gene \"RASD1\"; gene_biotype \"protein_coding\"; gene_synonym \"AGS1\"; gene_synonym \"DEXRAS1\"; gene_synonym \"MGC:26290\"; \nNC_000017.11    BestRefSeq      transcript      17494437        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"GeneID:51655\"; gbkey \"mRNA\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 2\"; transcript_biotype \"mRNA\"; \nNC_000017.11    BestRefSeq      exon    17495896        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 2\"; transcript_biotype \"mRNA\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      exon    17494437        17495610        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 2\"; transcript_biotype \"mRNA\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      CDS     17495896        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      CDS     17495531        17495610        .       -       2       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      start_codon     17496179        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      stop_codon      17495528        17495530        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      transcript      17494437        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"Ensembl:ENST00000225688.4\"; db_xref \"GeneID:51655\"; gbkey \"mRNA\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 1\"; tag \"MANE Select\"; transcript_biotype \"mRNA\"; \nNC_000017.11    BestRefSeq      exon    17495896        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"Ensembl:ENST00000225688.4\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 1\"; tag \"MANE Select\"; transcript_biotype \"mRNA\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      exon    17494437        17495684        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"Ensembl:ENST00000225688.4\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 1\"; tag \"MANE Select\"; transcript_biotype \"mRNA\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      CDS     17495896        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      CDS     17495128        17495684        .       -       2       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      start_codon     17496179        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      stop_codon      17495125        17495127        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"2\"; \n```\n\nThat worked!\nWe are getting quite a few lines, but these are all features for one single \ngene (e.g., there is only a single `gene` feature, in the first line).\n\n<br>\n\n### Intermezzo: `cut`, `uniq`, and `sort`\n\nUse `grep` and a few new shell commands,\nwe can quickly get some useful information about the GTF file.\nLet's learn about `cut`, `sort`, and `uniq` using our metadata file,\nwhich has the following content:\n\n```bash\n# Column -t can nicely display tabular files\ncolumn -t metadata/meta.tsv \n```\n```{.bash-out}\nsample_id       cell_line  variant\nASPC1_A178V     ASPC1      A178V\nASPC1_A178V     ASPC1      A178V\nASPC1_G31V      ASPC1      G31V\nASPC1_G31V      ASPC1      G31V\nMiapaca2_A178V  Miapaca2   A178V\nMiapaca2_A178V  Miapaca2   A178V\nMiapaca2_G31V   Miapaca2   G31V\nMiapaca2_G31V   Miapaca2   G31V\n```\n\nFirst, the **`cut` command can extract columns** from tabular files,\nand you can use its `-f` option to specify the column(s) you want to extract\n&mdash; for example,\n`-f 3` extracts column 3 and `-f 3,5` extracts columns 3 and 5:\n\n```bash\ncut -f 3 metadata/meta.tsv\n```\n```{.bash-out}\nvariant\nA178V\nA178V\nG31V\nG31V\nA178V\nA178V\nG31V\nG31V\n```\n\nSecond, the `sort` command will sort its input:\n\n```bash\ncut -f 3 metadata/meta.tsv | sort\n```\n```{.bash-out}\nA178V\nA178V\nA178V\nA178V\nG31V\nG31V\nG31V\nG31V\nvariant\n```\n\n::: {.callout-note}\n### Other `sort` functionality\nWhile in the example below, we're sorting a single column,\n`sort` can also sort multi-column files on one or more columns,\n_while keeping the rows intact_.\nAdditionally, it can sort numerically, in reverse, and much more.\n:::\n\nHmmm... maybe it isn't appropriate to include the header line\n(`variant` in the output above).\nA nice little trick to exclude the first line of a file is `tail -n+2`:\n\n```bash\ntail -n+2 | cut -f 3 metadata/meta.tsv | sort\n```\n```{.bash-out}\nA178V\nA178V\nA178V\nA178V\nG31V\nG31V\nG31V\nG31V\n```\n\nThird, `uniq` will remove _consecutive_ duplicate lines &mdash;\nfor that reason, we need to have the entries sorted if we want to remove all\nduplicates:\n\n```bash\ntail -n+2 metadata/meta.tsv | cut -f 3 | sort | uniq\n```\n```{.bash-out}\nA178V\nG31V\n```\n\nFor large input files, it's most often useful to either simply get a count of\nthe unique values in a column,\nor a count table showing how many times each value in a column occurs:\n\n```bash\ntail -n+2 metadata/meta.tsv | cut -f 3 | sort | uniq | wc -l\n```\n```{.bash-out}\n2               # (There are 2 unique values in this column)\n```\n```bash\n# This will show how many time each value occurs\ntail -n+2 metadata/meta.tsv | cut -f 3 | sort | uniq -c\n```\n```{.bash-out}\n      4 A178V\n      4 G31V\n```\n\n<br>\n\n### Getting some stats with `cut`, `uniq`, and `grep`\n\nHow many \"RASD\" genes are in the annotation?\n\n```bash\ngrep 'gene_id \"RASD' data/ref/GCF_000001405.40.gtf | cut -f 3 | grep -c \"gene\"\n```\n```{.bash-out}\n2\n```\n\nHow many snRNAs are in the annotation?\n\n```bash\ngrep -c 'gene_biotype \"snRNA\"' data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n172\n```\n\nHow many exon features are in the annotation for lincRNAs?\n\n```bash\ngrep \"lincRNA\" data/ref/GCF_000001405.40.gtf | grep -c \"exon\"\n```\n```{.bash-out}\n8\n```\n\nWhich feature types are present and what are their counts?\n\n```bash\ngrep -v \"^#\" data/ref/GCF_000001405.40.gtf | cut -f3 | sort | uniq -c\n```\n```{.bash-out}\n1835339 CDS\n2291763 exon\n  67127 gene\n 145185 start_codon\n 144753 stop_codon\n 200121 transcript\n```\n\nHow are these features distributed across strands?\n\n```bash\ngrep -v \"^#\" data/ref/GCF_000001405.40.gtf | cut -f3,7 | sort | uniq -c\n```\n```{.bash-out}\n 916540 CDS     -\n 918799 CDS     +\n1143757 exon    -\n1148006 exon    +\n  33435 gene    -\n  33692 gene    +\n  71561 start_codon     -\n  73624 start_codon     +\n  71473 stop_codon      -\n  73280 stop_codon      +\n  98976 transcript      -\n 101145 transcript      +\n```\n<br>\n\n## Recap\n\nTBA\n\n<br>\n\n## At-home reading: raw data management {-}\n\n### Making your valuable data read-only\n\nYour raw FASTQ data is extremely invaluable as it contains the result\nof your experiment and was produced by an expensive sequencing process.\nEven after you've produced \"clean versions\" of these files after quality and adapter\ntrimming, or after you have generated your final gene count tables,\nyou'll always want to keep these files around.\nFor example,\nthese are the foremost files you need to **make publicly available** \nwhen you publish your results\n(they are typically deposited at the **[NCBI's SRA](https://www.ncbi.nlm.nih.gov/sra)**),\nthey ensure that your results can be reproduced by yourself and others,\nand they allow for a modified re-analysis of the data after e.g. new methods or\nrelevant data become available.\n\nYou should therefore keep at least one copy of your FASTQ files in a Project dir\n(as opposed to a Scratch dir) at OSC &mdash;\nrecall that these dirs are being backed up daily by OSC!\nYou'll also want to keep at least one copy of the data outside of OSC.\n\nEven with those automatic back-ups and extra copies,\nit's still good practice to be careful with your (main) copy of the data at OSC.\nIn the previous session,\nwe learned that file removal with (e.g.) `rm` is permanent and irreversible,\nand performing an accidental removal of some of your FASTQ files or the entire dir\nwith a wrong command is not _that_ far-fetched.\nTo make this much less likely to happen,\n**it's a good idea to \"write-protect\" your FASTQ files**.\n\nFirst, let's briefly recap and expand our knowledge of file permissions:\n\n- Having **write permissions** for a file means that you can move, rename, modify,\n  overwrite, or delete it\n- **Read permissions** allow you to read and copy,\n- **Execute permissions** allow you to directly execute (run) a file,\n  (e.g. running a script as a command).\n\nThese permissions can be most easily set for three different groups of people:\n\n- The **owner (or \"user\")** of the file or dir,\n  which is by default the person that created it.\n  After you have copied or downloaded some FASTQ files,\n  you are the owner of these copies.\n- The **group**.\n  When you create a file in the PAS0471 project dir, its \"group\" will include\n  all members of the OSC project PAS0471.\n- **Everyone else (\"other\")**\n  In the example above,\n  this is all people that can access OSC but are not a member of PAS0471.\n\nWe can see what these permissions are for any file or dir by looking at the\n**first column of the output of `ls -l`**.\nLet's practice write-protection and its consequences with a dummy file &mdash;\nfirst, we create the dummy file and check the default permissions:\n\n```bash\ntouch permission_test_file\n\nls -l permission_test_file\n```\n```{.bash-out}\n# (Note, the very first dash below is about file _type_, not permissions:)\n -rw-r--r-- 1 jelmer PAS0471 0 Aug  7 16:27 permission_test_file\n```\n\n<figure><p align=\"left\"><img src=img/permissions.svg width=\"80%\"></p></figure>\n\nThe command to set these permissions (read/write/execute) for these groups\nof people (user/group/others, or everyone together) is `chmod`.\nThere are multiple ways of using this command,\nbut a common one is along the lines of `<who><operation><permission>`,\nwith e.g. `a-w` meaning _\"all minus write\"_ (remove write-permissions for all)\nand `o+r` meaning _\"others plus read\"_ (add read-permissions for others).\n\nTo remove write permission for everyone, including yourself, we would use:\n\n```bash\nchmod a-w permission_test_file\n\nls -l permission_test_file\n```\n```{.bash-out}\n# (Notice that there is no longer a 'w' in the sequence below:)\n-r--r--r-- 1 jelmer PAS0471 0 Aug  7 16:27 permission_test_file\n```\n\nNow, let's see what happens when we try to remove this file:\n\n```bash\nrm: remove write-protected regular empty file ‘permission_test_file’? n\n```\n\nNote that we can _still_ remove this file by answering `y`,\nbut we will hopefully not act _that_ stupid,\nand the question will make us reconsider and press `n`\n(also, if you made a mistake in a script that you run non-interactively,\nit will fail to remove write-protected files).\n\nFinally, let's actually write-protect our FASTQ files,\nand the reference genome files:\n\n```bash\nchmod a-w data/fastq/* data/ref/*\n```\n\n::: {.callout-warning collapse=\"true\"}\n#### Access permissions for directories (Click to expand)\nOne tricky aspects of file permissions is that to list a directory's content,\nyou need *execute* permissions for the dir!\nThis is something to take into account when you want to grant others\naccess to your project e.g. at OSC.\n\nTo set execute permissions *only for dirs* throughout a dir hierarchy:\n```sh\nchmod -R a+X my_large_dir       # Note the *uppercase* X\n```\n:::\n\n<br>\n\n### Checking file integrity after transfer\n\nWhen you receive your FASTQ files from a sequencing facility,\na small text file so-called **checksum** will usually accompany your FASTQ files,\nand have a name along the lines of\n`md5.txt`, `md5checksums.txt`, or `shasums.txt`.\nThese files contain a sort of digital fingerprints for your FASTQ files,\nand can be used to check whether your copy of these files is completely intact.\n\nFor example, in the dir with the original FASTQ files for our focal project,\nthe following `md5.txt` file is present:\n\n```bash\nls -lh /fs/ess/PAS0471/hsiangyin/ILMN_1753\\ hsiang\\ human\\ data | head -n 5\n```\n```{.bash-out}\ntotal 48G\n-rw-r--r-x 1 hsiangyin0214 PAS2250 3.4K Jul 18 19:12 md5.txt\n-rw-r--r-x 1 hsiangyin0214 PAS2250 1.2G Jul 18 19:11 X10784_Cruz-MonserrateZ_ASPC1_vec_V1N_1_S25_R1_001.fastq.gz\n-rw-r--r-x 1 hsiangyin0214 PAS2250 1.2G Jul 18 19:12 X10784_Cruz-MonserrateZ_ASPC1_vec_V1N_1_S25_R2_001.fastq.gz\n-rw-r--r-x 1 hsiangyin0214 PAS2250 1.3G Jul 18 19:11 X10785_Cruz-MonserrateZ_ASPC1_RASD1_V1N_1_S26_R1_001.fastq.gz\n-rw-r--r-x 1 hsiangyin0214 PAS2250 1.4G Jul 18 19:11 X10785_Cruz-MonserrateZ_ASPC1_RASD1_V1N_1_S26_R2_001.fastq.gz\n```\n\n::: {.callout-note}\n#### More on checksums\nChecksums are extremely compact summaries of files,\ncomputed so that even if just one character is changed in the data,\nthe checksum will be different.\n\nSeveral algorithms and their associated shell commands can compute checksums.\nLike in our case, you'll most often see _md5sums_ checksums accompanying\ngenomic data files,\nwhich can be computed and checked with the `md5sum` command.\n(The newer _SHA-1_ checksums can be computer and checked with the very\nsimilar `shasum` command.)\nThe checksums contain _hexadecimal_ characters: numbers and the letters a-f.\n\nWe typically compute or check checksums for a file,\nbut we can even do it for a string &mdash;\nthe example below demonstrates that the slightest change in a string\n(or file alike) will generate a completely different checksum:\n\n```bash\necho \"bioinformatics is fun\" | md5sum\n```\n```{.bash-out}\n010b5ebf7e207330de0e3fb0ff17a85a  -\n```\n```bash\necho \"bioinformatic is fun\" | md5sum\n```\n```{.bash-out}\n45cc2b76c02b973494954fd664fc0456  -\n```\n:::\n\nLet's take a look at our checksums &mdash;\nthe file has one row per file and two columns,\nthe first with the checksum and the second with the corresponding file name: \n\n```bash\nhead /fs/ess/PAS0471/hsiangyin/ILMN_1753\\ hsiang\\ human\\ data/md5.txt\n```\n```{.bash-out}\n54224841f172e016245843d4a8dbd9fd        X10790_Cruz-MonserrateZ_Panc1_vec_V1N_1_S31_R2_001.fastq.gz\ncf22012ae8c223a309cff4b6182c7d62        X10790_Cruz-MonserrateZ_Panc1_vec_V1N_1_S31_R1_001.fastq.gz\n647a4a15c0d55e56dd347cf295723f22        X10797_Cruz-MonserrateZ_Miapaca2_RASD1_V1N_1_S38_R2_001.fastq.gz\nce5d444f8f9d87d325dbe9bc09ef0470        X10797_Cruz-MonserrateZ_Miapaca2_RASD1_V1N_1_S38_R1_001.fastq.gz\n51bfea4ee102a3ac57520028bf654f01        X10798_Cruz-MonserrateZ_Miapaca2_G31V_V1N_1_S39_R2_001.fastq.gz\n```\n\nThis file was created by the folks at the sequencing facility,\nand now that we have the data at OSC and are ready to analyze it,\nwe can check if they are still fully intact\nand didn't -for example- get incompletely transferred.\n\nI have done this check for the original files,\nbut this takes a little while,\nand we can now do so with the subsampled FASTQ files we are working with in these\nsessions.\nFirst, let's copy a file `md5.txt` from the `demo` directory,\nwhich has the checksums for the subsampled FASTQ files as I created them:\n\n```bash\ncp /fs/ess/PAS0471/demo/202307_rnaseq/data/fastq/md5sums.txt data/fastq/\n```\n\nTo check whether the checksums for one or more files in a file correspond to\nthose for the files,\nwe can run `mdsum -c <mdsum-file>`,\nand should almost always do so _while inside the dir with the files of interest_.\nFor example:\n\n```bash\ncd data/fastq\nmd5sum -c md5sums.txt \n```\n```{.bash-out}\nASPC1_A178V_R1.fastq.gz: OK\nASPC1_A178V_R2.fastq.gz: OK\nASPC1_G31V_R1.fastq.gz: OK\nASPC1_G31V_R2.fastq.gz: OK\nMiapaca2_A178V_R1.fastq.gz: OK\nMiapaca2_A178V_R2.fastq.gz: OK\nMiapaca2_G31V_R1.fastq.gz: OK\nMiapaca2_G31V_R2.fastq.gz: OK\n```\n\nIf there were any differences,\nthe `md5sum` command would clearly warn you about them,\nas you can see in the exercise below.\n\n::: {.callout-note collapse=\"true\"}\n#### Making the checksum check fail (Click to expand)\n\nLet's compute a checksum for the `README.md` file and save it in a file:\n\n```bash\n# Assuming you went into data/fastq above;\n# you need to be in /fs/ess/PAS0471/$USER/rnaseq-intro\ncd ../..\n\nmd5sum README.md > md5sum_for_README.txt\n\ncat md5sum_for_README.txt\n```\n```{.bash-out}\nd4c4a8df4870f68808553ac0f5484aa3  README.md\n```\n\nNow, let's add a line to our `README.md` that says where the reference genome\nfiles are:\n\n```bash\n# (You'll need single quotes like below, or the shell will interpret the backticks)\necho 'Files for the GRCh38.p14 human genome are in the `data/ref` dir' >> README.md\n\ntail -n3 README.md\n```\n```{.bash-out}\nand columns specifying the read direction, sample ID, cell line, and variant.\n\nFiles for the GRCh38.p14 human genome are in the `data/ref` dir\n```\n```bash\nmd5sum -c md5sum_for_README.txt\n```\n\nFinally, let's check the checksum, and watch it fail:\n\n```{.bash-out}\nREADME.md: FAILED\nmd5sum: WARNING: 1 computed checksum did NOT match\n```\n:::\n\n<br> <br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}